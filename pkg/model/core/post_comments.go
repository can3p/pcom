// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostComment is an object representing the database table.
type PostComment struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID          string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PostID          string      `boil:"post_id" json:"post_id" toml:"post_id" yaml:"post_id"`
	ParentCommentID null.String `boil:"parent_comment_id" json:"parent_comment_id,omitempty" toml:"parent_comment_id" yaml:"parent_comment_id,omitempty"`
	Body            string      `boil:"body" json:"body" toml:"body" yaml:"body"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *postCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostCommentColumns = struct {
	ID              string
	UserID          string
	PostID          string
	ParentCommentID string
	Body            string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	UserID:          "user_id",
	PostID:          "post_id",
	ParentCommentID: "parent_comment_id",
	Body:            "body",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var PostCommentTableColumns = struct {
	ID              string
	UserID          string
	PostID          string
	ParentCommentID string
	Body            string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "post_comments.id",
	UserID:          "post_comments.user_id",
	PostID:          "post_comments.post_id",
	ParentCommentID: "post_comments.parent_comment_id",
	Body:            "post_comments.body",
	CreatedAt:       "post_comments.created_at",
	UpdatedAt:       "post_comments.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PostCommentWhere = struct {
	ID              whereHelperstring
	UserID          whereHelperstring
	PostID          whereHelperstring
	ParentCommentID whereHelpernull_String
	Body            whereHelperstring
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	ID:              whereHelperstring{field: "\"post_comments\".\"id\""},
	UserID:          whereHelperstring{field: "\"post_comments\".\"user_id\""},
	PostID:          whereHelperstring{field: "\"post_comments\".\"post_id\""},
	ParentCommentID: whereHelpernull_String{field: "\"post_comments\".\"parent_comment_id\""},
	Body:            whereHelperstring{field: "\"post_comments\".\"body\""},
	CreatedAt:       whereHelpertime_Time{field: "\"post_comments\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"post_comments\".\"updated_at\""},
}

// PostCommentRels is where relationship names are stored.
var PostCommentRels = struct {
	ParentComment             string
	Post                      string
	User                      string
	ParentCommentPostComments string
}{
	ParentComment:             "ParentComment",
	Post:                      "Post",
	User:                      "User",
	ParentCommentPostComments: "ParentCommentPostComments",
}

// postCommentR is where relationships are stored.
type postCommentR struct {
	ParentComment             *PostComment     `boil:"ParentComment" json:"ParentComment" toml:"ParentComment" yaml:"ParentComment"`
	Post                      *Post            `boil:"Post" json:"Post" toml:"Post" yaml:"Post"`
	User                      *User            `boil:"User" json:"User" toml:"User" yaml:"User"`
	ParentCommentPostComments PostCommentSlice `boil:"ParentCommentPostComments" json:"ParentCommentPostComments" toml:"ParentCommentPostComments" yaml:"ParentCommentPostComments"`
}

// NewStruct creates a new relationship struct
func (*postCommentR) NewStruct() *postCommentR {
	return &postCommentR{}
}

func (r *postCommentR) GetParentComment() *PostComment {
	if r == nil {
		return nil
	}
	return r.ParentComment
}

func (r *postCommentR) GetPost() *Post {
	if r == nil {
		return nil
	}
	return r.Post
}

func (r *postCommentR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *postCommentR) GetParentCommentPostComments() PostCommentSlice {
	if r == nil {
		return nil
	}
	return r.ParentCommentPostComments
}

// postCommentL is where Load methods for each relationship are stored.
type postCommentL struct{}

var (
	postCommentAllColumns            = []string{"id", "user_id", "post_id", "parent_comment_id", "body", "created_at", "updated_at"}
	postCommentColumnsWithoutDefault = []string{"id", "user_id", "post_id", "body", "created_at", "updated_at"}
	postCommentColumnsWithDefault    = []string{"parent_comment_id"}
	postCommentPrimaryKeyColumns     = []string{"id"}
	postCommentGeneratedColumns      = []string{}
)

type (
	// PostCommentSlice is an alias for a slice of pointers to PostComment.
	// This should almost always be used instead of []PostComment.
	PostCommentSlice []*PostComment

	postCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postCommentType                 = reflect.TypeOf(&PostComment{})
	postCommentMapping              = queries.MakeStructMapping(postCommentType)
	postCommentPrimaryKeyMapping, _ = queries.BindMapping(postCommentType, postCommentMapping, postCommentPrimaryKeyColumns)
	postCommentInsertCacheMut       sync.RWMutex
	postCommentInsertCache          = make(map[string]insertCache)
	postCommentUpdateCacheMut       sync.RWMutex
	postCommentUpdateCache          = make(map[string]updateCache)
	postCommentUpsertCacheMut       sync.RWMutex
	postCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single postComment record from the query, and panics on error.
func (q postCommentQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *PostComment {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single postComment record from the query.
func (q postCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostComment, error) {
	o := &PostComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for post_comments")
	}

	return o, nil
}

// AllP returns all PostComment records from the query, and panics on error.
func (q postCommentQuery) AllP(ctx context.Context, exec boil.ContextExecutor) PostCommentSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all PostComment records from the query.
func (q postCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostCommentSlice, error) {
	var o []*PostComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to PostComment slice")
	}

	return o, nil
}

// CountP returns the count of all PostComment records in the query, and panics on error.
func (q postCommentQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all PostComment records in the query.
func (q postCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count post_comments rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q postCommentQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q postCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if post_comments exists")
	}

	return count > 0, nil
}

// ParentComment pointed to by the foreign key.
func (o *PostComment) ParentComment(mods ...qm.QueryMod) postCommentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ParentCommentID),
	}

	queryMods = append(queryMods, mods...)

	return PostComments(queryMods...)
}

// Post pointed to by the foreign key.
func (o *PostComment) Post(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PostID),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// User pointed to by the foreign key.
func (o *PostComment) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ParentCommentPostComments retrieves all the post_comment's PostComments with an executor via parent_comment_id column.
func (o *PostComment) ParentCommentPostComments(mods ...qm.QueryMod) postCommentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"post_comments\".\"parent_comment_id\"=?", o.ID),
	)

	return PostComments(queryMods...)
}

// LoadParentComment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postCommentL) LoadParentComment(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostComment interface{}, mods queries.Applicator) error {
	var slice []*PostComment
	var object *PostComment

	if singular {
		var ok bool
		object, ok = maybePostComment.(*PostComment)
		if !ok {
			object = new(PostComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostComment))
			}
		}
	} else {
		s, ok := maybePostComment.(*[]*PostComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostComment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postCommentR{}
		}
		if !queries.IsNil(object.ParentCommentID) {
			args[object.ParentCommentID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postCommentR{}
			}

			if !queries.IsNil(obj.ParentCommentID) {
				args[obj.ParentCommentID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`post_comments`),
		qm.WhereIn(`post_comments.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PostComment")
	}

	var resultSlice []*PostComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PostComment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for post_comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post_comments")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentComment = foreign
		if foreign.R == nil {
			foreign.R = &postCommentR{}
		}
		foreign.R.ParentCommentPostComments = append(foreign.R.ParentCommentPostComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentCommentID, foreign.ID) {
				local.R.ParentComment = foreign
				if foreign.R == nil {
					foreign.R = &postCommentR{}
				}
				foreign.R.ParentCommentPostComments = append(foreign.R.ParentCommentPostComments, local)
				break
			}
		}
	}

	return nil
}

// LoadPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postCommentL) LoadPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostComment interface{}, mods queries.Applicator) error {
	var slice []*PostComment
	var object *PostComment

	if singular {
		var ok bool
		object, ok = maybePostComment.(*PostComment)
		if !ok {
			object = new(PostComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostComment))
			}
		}
	} else {
		s, ok := maybePostComment.(*[]*PostComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostComment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postCommentR{}
		}
		args[object.PostID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postCommentR{}
			}

			args[obj.PostID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Post = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.PostComments = append(foreign.R.PostComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PostID == foreign.ID {
				local.R.Post = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.PostComments = append(foreign.R.PostComments, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postCommentL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostComment interface{}, mods queries.Applicator) error {
	var slice []*PostComment
	var object *PostComment

	if singular {
		var ok bool
		object, ok = maybePostComment.(*PostComment)
		if !ok {
			object = new(PostComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostComment))
			}
		}
	} else {
		s, ok := maybePostComment.(*[]*PostComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostComment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postCommentR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postCommentR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PostComments = append(foreign.R.PostComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PostComments = append(foreign.R.PostComments, local)
				break
			}
		}
	}

	return nil
}

// LoadParentCommentPostComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (postCommentL) LoadParentCommentPostComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostComment interface{}, mods queries.Applicator) error {
	var slice []*PostComment
	var object *PostComment

	if singular {
		var ok bool
		object, ok = maybePostComment.(*PostComment)
		if !ok {
			object = new(PostComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostComment))
			}
		}
	} else {
		s, ok := maybePostComment.(*[]*PostComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostComment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postCommentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postCommentR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`post_comments`),
		qm.WhereIn(`post_comments.parent_comment_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load post_comments")
	}

	var resultSlice []*PostComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice post_comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on post_comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for post_comments")
	}

	if singular {
		object.R.ParentCommentPostComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postCommentR{}
			}
			foreign.R.ParentComment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentCommentID) {
				local.R.ParentCommentPostComments = append(local.R.ParentCommentPostComments, foreign)
				if foreign.R == nil {
					foreign.R = &postCommentR{}
				}
				foreign.R.ParentComment = local
				break
			}
		}
	}

	return nil
}

// SetParentCommentP of the postComment to the related item.
// Sets o.R.ParentComment to related.
// Adds o to related.R.ParentCommentPostComments.
// Panics on error.
func (o *PostComment) SetParentCommentP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PostComment) {
	if err := o.SetParentComment(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentComment of the postComment to the related item.
// Sets o.R.ParentComment to related.
// Adds o to related.R.ParentCommentPostComments.
func (o *PostComment) SetParentComment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PostComment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"post_comments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_comment_id"}),
		strmangle.WhereClause("\"", "\"", 2, postCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentCommentID, related.ID)
	if o.R == nil {
		o.R = &postCommentR{
			ParentComment: related,
		}
	} else {
		o.R.ParentComment = related
	}

	if related.R == nil {
		related.R = &postCommentR{
			ParentCommentPostComments: PostCommentSlice{o},
		}
	} else {
		related.R.ParentCommentPostComments = append(related.R.ParentCommentPostComments, o)
	}

	return nil
}

// RemoveParentCommentP relationship.
// Sets o.R.ParentComment to nil.
// Removes o from all passed in related items' relationships struct.
// Panics on error.
func (o *PostComment) RemoveParentCommentP(ctx context.Context, exec boil.ContextExecutor, related *PostComment) {
	if err := o.RemoveParentComment(ctx, exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentComment relationship.
// Sets o.R.ParentComment to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PostComment) RemoveParentComment(ctx context.Context, exec boil.ContextExecutor, related *PostComment) error {
	var err error

	queries.SetScanner(&o.ParentCommentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_comment_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ParentComment = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentCommentPostComments {
		if queries.Equal(o.ParentCommentID, ri.ParentCommentID) {
			continue
		}

		ln := len(related.R.ParentCommentPostComments)
		if ln > 1 && i < ln-1 {
			related.R.ParentCommentPostComments[i] = related.R.ParentCommentPostComments[ln-1]
		}
		related.R.ParentCommentPostComments = related.R.ParentCommentPostComments[:ln-1]
		break
	}
	return nil
}

// SetPostP of the postComment to the related item.
// Sets o.R.Post to related.
// Adds o to related.R.PostComments.
// Panics on error.
func (o *PostComment) SetPostP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) {
	if err := o.SetPost(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPost of the postComment to the related item.
// Sets o.R.Post to related.
// Adds o to related.R.PostComments.
func (o *PostComment) SetPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"post_comments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"post_id"}),
		strmangle.WhereClause("\"", "\"", 2, postCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PostID = related.ID
	if o.R == nil {
		o.R = &postCommentR{
			Post: related,
		}
	} else {
		o.R.Post = related
	}

	if related.R == nil {
		related.R = &postR{
			PostComments: PostCommentSlice{o},
		}
	} else {
		related.R.PostComments = append(related.R.PostComments, o)
	}

	return nil
}

// SetUserP of the postComment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PostComments.
// Panics on error.
func (o *PostComment) SetUserP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetUser(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the postComment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PostComments.
func (o *PostComment) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"post_comments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, postCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &postCommentR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			PostComments: PostCommentSlice{o},
		}
	} else {
		related.R.PostComments = append(related.R.PostComments, o)
	}

	return nil
}

// AddParentCommentPostCommentsP adds the given related objects to the existing relationships
// of the post_comment, optionally inserting them as new records.
// Appends related to o.R.ParentCommentPostComments.
// Sets related.R.ParentComment appropriately.
// Panics on error.
func (o *PostComment) AddParentCommentPostCommentsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PostComment) {
	if err := o.AddParentCommentPostComments(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentCommentPostComments adds the given related objects to the existing relationships
// of the post_comment, optionally inserting them as new records.
// Appends related to o.R.ParentCommentPostComments.
// Sets related.R.ParentComment appropriately.
func (o *PostComment) AddParentCommentPostComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PostComment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentCommentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"post_comments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_comment_id"}),
				strmangle.WhereClause("\"", "\"", 2, postCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentCommentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &postCommentR{
			ParentCommentPostComments: related,
		}
	} else {
		o.R.ParentCommentPostComments = append(o.R.ParentCommentPostComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postCommentR{
				ParentComment: o,
			}
		} else {
			rel.R.ParentComment = o
		}
	}
	return nil
}

// SetParentCommentPostCommentsP removes all previously related items of the
// post_comment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentComment's ParentCommentPostComments accordingly.
// Replaces o.R.ParentCommentPostComments with related.
// Sets related.R.ParentComment's ParentCommentPostComments accordingly.
// Panics on error.
func (o *PostComment) SetParentCommentPostCommentsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PostComment) {
	if err := o.SetParentCommentPostComments(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentCommentPostComments removes all previously related items of the
// post_comment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentComment's ParentCommentPostComments accordingly.
// Replaces o.R.ParentCommentPostComments with related.
// Sets related.R.ParentComment's ParentCommentPostComments accordingly.
func (o *PostComment) SetParentCommentPostComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PostComment) error {
	query := "update \"post_comments\" set \"parent_comment_id\" = null where \"parent_comment_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentCommentPostComments {
			queries.SetScanner(&rel.ParentCommentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentComment = nil
		}
		o.R.ParentCommentPostComments = nil
	}

	return o.AddParentCommentPostComments(ctx, exec, insert, related...)
}

// RemoveParentCommentPostCommentsP relationships from objects passed in.
// Removes related items from R.ParentCommentPostComments (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentComment.
// Panics on error.
func (o *PostComment) RemoveParentCommentPostCommentsP(ctx context.Context, exec boil.ContextExecutor, related ...*PostComment) {
	if err := o.RemoveParentCommentPostComments(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentCommentPostComments relationships from objects passed in.
// Removes related items from R.ParentCommentPostComments (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentComment.
func (o *PostComment) RemoveParentCommentPostComments(ctx context.Context, exec boil.ContextExecutor, related ...*PostComment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentCommentID, nil)
		if rel.R != nil {
			rel.R.ParentComment = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_comment_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentCommentPostComments {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentCommentPostComments)
			if ln > 1 && i < ln-1 {
				o.R.ParentCommentPostComments[i] = o.R.ParentCommentPostComments[ln-1]
			}
			o.R.ParentCommentPostComments = o.R.ParentCommentPostComments[:ln-1]
			break
		}
	}

	return nil
}

// PostComments retrieves all the records using an executor.
func PostComments(mods ...qm.QueryMod) postCommentQuery {
	mods = append(mods, qm.From("\"post_comments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"post_comments\".*"})
	}

	return postCommentQuery{q}
}

// FindPostCommentP retrieves a single record by ID with an executor, and panics on error.
func FindPostCommentP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *PostComment {
	retobj, err := FindPostComment(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPostComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostComment(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PostComment, error) {
	postCommentObj := &PostComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"post_comments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, postCommentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from post_comments")
	}

	return postCommentObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *PostComment) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no post_comments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(postCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postCommentInsertCacheMut.RLock()
	cache, cached := postCommentInsertCache[key]
	postCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postCommentAllColumns,
			postCommentColumnsWithDefault,
			postCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postCommentType, postCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postCommentType, postCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"post_comments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"post_comments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into post_comments")
	}

	if !cached {
		postCommentInsertCacheMut.Lock()
		postCommentInsertCache[key] = cache
		postCommentInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the PostComment, and panics on error.
// See Update for more documentation.
func (o *PostComment) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the PostComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	postCommentUpdateCacheMut.RLock()
	cache, cached := postCommentUpdateCache[key]
	postCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postCommentAllColumns,
			postCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update post_comments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"post_comments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, postCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postCommentType, postCommentMapping, append(wl, postCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update post_comments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for post_comments")
	}

	if !cached {
		postCommentUpdateCacheMut.Lock()
		postCommentUpdateCache[key] = cache
		postCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q postCommentQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q postCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for post_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for post_comments")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PostCommentSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"post_comments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, postCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in postComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all postComment")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *PostComment) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no post_comments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(postCommentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postCommentUpsertCacheMut.RLock()
	cache, cached := postCommentUpsertCache[key]
	postCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			postCommentAllColumns,
			postCommentColumnsWithDefault,
			postCommentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postCommentAllColumns,
			postCommentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert post_comments, could not build update column list")
		}

		ret := strmangle.SetComplement(postCommentAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(postCommentPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert post_comments, could not build conflict column list")
			}

			conflict = make([]string, len(postCommentPrimaryKeyColumns))
			copy(conflict, postCommentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"post_comments\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(postCommentType, postCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postCommentType, postCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert post_comments")
	}

	if !cached {
		postCommentUpsertCacheMut.Lock()
		postCommentUpsertCache[key] = cache
		postCommentUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single PostComment record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *PostComment) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single PostComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no PostComment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postCommentPrimaryKeyMapping)
	sql := "DELETE FROM \"post_comments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from post_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for post_comments")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q postCommentQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q postCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no postCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from post_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for post_comments")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PostCommentSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"post_comments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from postComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for post_comments")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *PostComment) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PostCommentSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"post_comments\".* FROM \"post_comments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in PostCommentSlice")
	}

	*o = slice

	return nil
}

// PostCommentExistsP checks if the PostComment row exists. Panics on error.
func PostCommentExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := PostCommentExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PostCommentExists checks if the PostComment row exists.
func PostCommentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"post_comments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if post_comments exists")
	}

	return exists, nil
}

// Exists checks if the PostComment row exists.
func (o *PostComment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostCommentExists(ctx, exec, o.ID)
}
