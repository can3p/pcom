// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RSSFeed is an object representing the database table.
type RSSFeed struct {
	ID                      string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	URL                     string      `boil:"url" json:"url" toml:"url" yaml:"url"`
	Title                   null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Description             null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	LastFetchedAt           null.Time   `boil:"last_fetched_at" json:"last_fetched_at,omitempty" toml:"last_fetched_at" yaml:"last_fetched_at,omitempty"`
	AvgItemsPerDay          float64     `boil:"avg_items_per_day" json:"avg_items_per_day" toml:"avg_items_per_day" yaml:"avg_items_per_day"`
	LastItemsCount          int         `boil:"last_items_count" json:"last_items_count" toml:"last_items_count" yaml:"last_items_count"`
	UpdateFrequencyMinutes  int         `boil:"update_frequency_minutes" json:"update_frequency_minutes" toml:"update_frequency_minutes" yaml:"update_frequency_minutes"`
	NextFetchAt             null.Time   `boil:"next_fetch_at" json:"next_fetch_at,omitempty" toml:"next_fetch_at" yaml:"next_fetch_at,omitempty"`
	LastManualRefreshAt     null.Time   `boil:"last_manual_refresh_at" json:"last_manual_refresh_at,omitempty" toml:"last_manual_refresh_at" yaml:"last_manual_refresh_at,omitempty"`
	ConsecutiveEmptyFetches int         `boil:"consecutive_empty_fetches" json:"consecutive_empty_fetches" toml:"consecutive_empty_fetches" yaml:"consecutive_empty_fetches"`
	CreatedAt               time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt               time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *rssFeedR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rssFeedL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RSSFeedColumns = struct {
	ID                      string
	URL                     string
	Title                   string
	Description             string
	LastFetchedAt           string
	AvgItemsPerDay          string
	LastItemsCount          string
	UpdateFrequencyMinutes  string
	NextFetchAt             string
	LastManualRefreshAt     string
	ConsecutiveEmptyFetches string
	CreatedAt               string
	UpdatedAt               string
}{
	ID:                      "id",
	URL:                     "url",
	Title:                   "title",
	Description:             "description",
	LastFetchedAt:           "last_fetched_at",
	AvgItemsPerDay:          "avg_items_per_day",
	LastItemsCount:          "last_items_count",
	UpdateFrequencyMinutes:  "update_frequency_minutes",
	NextFetchAt:             "next_fetch_at",
	LastManualRefreshAt:     "last_manual_refresh_at",
	ConsecutiveEmptyFetches: "consecutive_empty_fetches",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
}

var RSSFeedTableColumns = struct {
	ID                      string
	URL                     string
	Title                   string
	Description             string
	LastFetchedAt           string
	AvgItemsPerDay          string
	LastItemsCount          string
	UpdateFrequencyMinutes  string
	NextFetchAt             string
	LastManualRefreshAt     string
	ConsecutiveEmptyFetches string
	CreatedAt               string
	UpdatedAt               string
}{
	ID:                      "rss_feeds.id",
	URL:                     "rss_feeds.url",
	Title:                   "rss_feeds.title",
	Description:             "rss_feeds.description",
	LastFetchedAt:           "rss_feeds.last_fetched_at",
	AvgItemsPerDay:          "rss_feeds.avg_items_per_day",
	LastItemsCount:          "rss_feeds.last_items_count",
	UpdateFrequencyMinutes:  "rss_feeds.update_frequency_minutes",
	NextFetchAt:             "rss_feeds.next_fetch_at",
	LastManualRefreshAt:     "rss_feeds.last_manual_refresh_at",
	ConsecutiveEmptyFetches: "rss_feeds.consecutive_empty_fetches",
	CreatedAt:               "rss_feeds.created_at",
	UpdatedAt:               "rss_feeds.updated_at",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var RSSFeedWhere = struct {
	ID                      whereHelperstring
	URL                     whereHelperstring
	Title                   whereHelpernull_String
	Description             whereHelpernull_String
	LastFetchedAt           whereHelpernull_Time
	AvgItemsPerDay          whereHelperfloat64
	LastItemsCount          whereHelperint
	UpdateFrequencyMinutes  whereHelperint
	NextFetchAt             whereHelpernull_Time
	LastManualRefreshAt     whereHelpernull_Time
	ConsecutiveEmptyFetches whereHelperint
	CreatedAt               whereHelpertime_Time
	UpdatedAt               whereHelpertime_Time
}{
	ID:                      whereHelperstring{field: "\"rss_feeds\".\"id\""},
	URL:                     whereHelperstring{field: "\"rss_feeds\".\"url\""},
	Title:                   whereHelpernull_String{field: "\"rss_feeds\".\"title\""},
	Description:             whereHelpernull_String{field: "\"rss_feeds\".\"description\""},
	LastFetchedAt:           whereHelpernull_Time{field: "\"rss_feeds\".\"last_fetched_at\""},
	AvgItemsPerDay:          whereHelperfloat64{field: "\"rss_feeds\".\"avg_items_per_day\""},
	LastItemsCount:          whereHelperint{field: "\"rss_feeds\".\"last_items_count\""},
	UpdateFrequencyMinutes:  whereHelperint{field: "\"rss_feeds\".\"update_frequency_minutes\""},
	NextFetchAt:             whereHelpernull_Time{field: "\"rss_feeds\".\"next_fetch_at\""},
	LastManualRefreshAt:     whereHelpernull_Time{field: "\"rss_feeds\".\"last_manual_refresh_at\""},
	ConsecutiveEmptyFetches: whereHelperint{field: "\"rss_feeds\".\"consecutive_empty_fetches\""},
	CreatedAt:               whereHelpertime_Time{field: "\"rss_feeds\".\"created_at\""},
	UpdatedAt:               whereHelpertime_Time{field: "\"rss_feeds\".\"updated_at\""},
}

// RSSFeedRels is where relationship names are stored.
var RSSFeedRels = struct {
	FeedRSSItems              string
	FeedUserFeedSubscriptions string
}{
	FeedRSSItems:              "FeedRSSItems",
	FeedUserFeedSubscriptions: "FeedUserFeedSubscriptions",
}

// rssFeedR is where relationships are stored.
type rssFeedR struct {
	FeedRSSItems              RSSItemSlice              `boil:"FeedRSSItems" json:"FeedRSSItems" toml:"FeedRSSItems" yaml:"FeedRSSItems"`
	FeedUserFeedSubscriptions UserFeedSubscriptionSlice `boil:"FeedUserFeedSubscriptions" json:"FeedUserFeedSubscriptions" toml:"FeedUserFeedSubscriptions" yaml:"FeedUserFeedSubscriptions"`
}

// NewStruct creates a new relationship struct
func (*rssFeedR) NewStruct() *rssFeedR {
	return &rssFeedR{}
}

func (r *rssFeedR) GetFeedRSSItems() RSSItemSlice {
	if r == nil {
		return nil
	}
	return r.FeedRSSItems
}

func (r *rssFeedR) GetFeedUserFeedSubscriptions() UserFeedSubscriptionSlice {
	if r == nil {
		return nil
	}
	return r.FeedUserFeedSubscriptions
}

// rssFeedL is where Load methods for each relationship are stored.
type rssFeedL struct{}

var (
	rssFeedAllColumns            = []string{"id", "url", "title", "description", "last_fetched_at", "avg_items_per_day", "last_items_count", "update_frequency_minutes", "next_fetch_at", "last_manual_refresh_at", "consecutive_empty_fetches", "created_at", "updated_at"}
	rssFeedColumnsWithoutDefault = []string{"id", "url", "avg_items_per_day", "update_frequency_minutes", "consecutive_empty_fetches", "created_at", "updated_at"}
	rssFeedColumnsWithDefault    = []string{"title", "description", "last_fetched_at", "last_items_count", "next_fetch_at", "last_manual_refresh_at"}
	rssFeedPrimaryKeyColumns     = []string{"id"}
	rssFeedGeneratedColumns      = []string{}
)

type (
	// RSSFeedSlice is an alias for a slice of pointers to RSSFeed.
	// This should almost always be used instead of []RSSFeed.
	RSSFeedSlice []*RSSFeed

	rssFeedQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rssFeedType                 = reflect.TypeOf(&RSSFeed{})
	rssFeedMapping              = queries.MakeStructMapping(rssFeedType)
	rssFeedPrimaryKeyMapping, _ = queries.BindMapping(rssFeedType, rssFeedMapping, rssFeedPrimaryKeyColumns)
	rssFeedInsertCacheMut       sync.RWMutex
	rssFeedInsertCache          = make(map[string]insertCache)
	rssFeedUpdateCacheMut       sync.RWMutex
	rssFeedUpdateCache          = make(map[string]updateCache)
	rssFeedUpsertCacheMut       sync.RWMutex
	rssFeedUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single rssFeed record from the query, and panics on error.
func (q rssFeedQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *RSSFeed {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single rssFeed record from the query.
func (q rssFeedQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RSSFeed, error) {
	o := &RSSFeed{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for rss_feeds")
	}

	return o, nil
}

// AllP returns all RSSFeed records from the query, and panics on error.
func (q rssFeedQuery) AllP(ctx context.Context, exec boil.ContextExecutor) RSSFeedSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all RSSFeed records from the query.
func (q rssFeedQuery) All(ctx context.Context, exec boil.ContextExecutor) (RSSFeedSlice, error) {
	var o []*RSSFeed

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to RSSFeed slice")
	}

	return o, nil
}

// CountP returns the count of all RSSFeed records in the query, and panics on error.
func (q rssFeedQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all RSSFeed records in the query.
func (q rssFeedQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count rss_feeds rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q rssFeedQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q rssFeedQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if rss_feeds exists")
	}

	return count > 0, nil
}

// FeedRSSItems retrieves all the rss_item's RSSItems with an executor via feed_id column.
func (o *RSSFeed) FeedRSSItems(mods ...qm.QueryMod) rssItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"rss_items\".\"feed_id\"=?", o.ID),
	)

	return RSSItems(queryMods...)
}

// FeedUserFeedSubscriptions retrieves all the user_feed_subscription's UserFeedSubscriptions with an executor via feed_id column.
func (o *RSSFeed) FeedUserFeedSubscriptions(mods ...qm.QueryMod) userFeedSubscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_feed_subscriptions\".\"feed_id\"=?", o.ID),
	)

	return UserFeedSubscriptions(queryMods...)
}

// LoadFeedRSSItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rssFeedL) LoadFeedRSSItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRSSFeed interface{}, mods queries.Applicator) error {
	var slice []*RSSFeed
	var object *RSSFeed

	if singular {
		var ok bool
		object, ok = maybeRSSFeed.(*RSSFeed)
		if !ok {
			object = new(RSSFeed)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRSSFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRSSFeed))
			}
		}
	} else {
		s, ok := maybeRSSFeed.(*[]*RSSFeed)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRSSFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRSSFeed))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rssFeedR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rssFeedR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rss_items`),
		qm.WhereIn(`rss_items.feed_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rss_items")
	}

	var resultSlice []*RSSItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rss_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rss_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rss_items")
	}

	if singular {
		object.R.FeedRSSItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rssItemR{}
			}
			foreign.R.Feed = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FeedID {
				local.R.FeedRSSItems = append(local.R.FeedRSSItems, foreign)
				if foreign.R == nil {
					foreign.R = &rssItemR{}
				}
				foreign.R.Feed = local
				break
			}
		}
	}

	return nil
}

// LoadFeedUserFeedSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rssFeedL) LoadFeedUserFeedSubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRSSFeed interface{}, mods queries.Applicator) error {
	var slice []*RSSFeed
	var object *RSSFeed

	if singular {
		var ok bool
		object, ok = maybeRSSFeed.(*RSSFeed)
		if !ok {
			object = new(RSSFeed)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRSSFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRSSFeed))
			}
		}
	} else {
		s, ok := maybeRSSFeed.(*[]*RSSFeed)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRSSFeed)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRSSFeed))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rssFeedR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rssFeedR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_feed_subscriptions`),
		qm.WhereIn(`user_feed_subscriptions.feed_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_feed_subscriptions")
	}

	var resultSlice []*UserFeedSubscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_feed_subscriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_feed_subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_feed_subscriptions")
	}

	if singular {
		object.R.FeedUserFeedSubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userFeedSubscriptionR{}
			}
			foreign.R.Feed = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FeedID {
				local.R.FeedUserFeedSubscriptions = append(local.R.FeedUserFeedSubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &userFeedSubscriptionR{}
				}
				foreign.R.Feed = local
				break
			}
		}
	}

	return nil
}

// AddFeedRSSItemsP adds the given related objects to the existing relationships
// of the rss_feed, optionally inserting them as new records.
// Appends related to o.R.FeedRSSItems.
// Sets related.R.Feed appropriately.
// Panics on error.
func (o *RSSFeed) AddFeedRSSItemsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RSSItem) {
	if err := o.AddFeedRSSItems(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFeedRSSItems adds the given related objects to the existing relationships
// of the rss_feed, optionally inserting them as new records.
// Appends related to o.R.FeedRSSItems.
// Sets related.R.Feed appropriately.
func (o *RSSFeed) AddFeedRSSItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RSSItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FeedID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"rss_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"feed_id"}),
				strmangle.WhereClause("\"", "\"", 2, rssItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FeedID = o.ID
		}
	}

	if o.R == nil {
		o.R = &rssFeedR{
			FeedRSSItems: related,
		}
	} else {
		o.R.FeedRSSItems = append(o.R.FeedRSSItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rssItemR{
				Feed: o,
			}
		} else {
			rel.R.Feed = o
		}
	}
	return nil
}

// AddFeedUserFeedSubscriptionsP adds the given related objects to the existing relationships
// of the rss_feed, optionally inserting them as new records.
// Appends related to o.R.FeedUserFeedSubscriptions.
// Sets related.R.Feed appropriately.
// Panics on error.
func (o *RSSFeed) AddFeedUserFeedSubscriptionsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserFeedSubscription) {
	if err := o.AddFeedUserFeedSubscriptions(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddFeedUserFeedSubscriptions adds the given related objects to the existing relationships
// of the rss_feed, optionally inserting them as new records.
// Appends related to o.R.FeedUserFeedSubscriptions.
// Sets related.R.Feed appropriately.
func (o *RSSFeed) AddFeedUserFeedSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserFeedSubscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FeedID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_feed_subscriptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"feed_id"}),
				strmangle.WhereClause("\"", "\"", 2, userFeedSubscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FeedID = o.ID
		}
	}

	if o.R == nil {
		o.R = &rssFeedR{
			FeedUserFeedSubscriptions: related,
		}
	} else {
		o.R.FeedUserFeedSubscriptions = append(o.R.FeedUserFeedSubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userFeedSubscriptionR{
				Feed: o,
			}
		} else {
			rel.R.Feed = o
		}
	}
	return nil
}

// RSSFeeds retrieves all the records using an executor.
func RSSFeeds(mods ...qm.QueryMod) rssFeedQuery {
	mods = append(mods, qm.From("\"rss_feeds\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rss_feeds\".*"})
	}

	return rssFeedQuery{q}
}

// FindRSSFeedP retrieves a single record by ID with an executor, and panics on error.
func FindRSSFeedP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *RSSFeed {
	retobj, err := FindRSSFeed(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRSSFeed retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRSSFeed(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RSSFeed, error) {
	rssFeedObj := &RSSFeed{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rss_feeds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, rssFeedObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from rss_feeds")
	}

	return rssFeedObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *RSSFeed) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RSSFeed) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no rss_feeds provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(rssFeedColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rssFeedInsertCacheMut.RLock()
	cache, cached := rssFeedInsertCache[key]
	rssFeedInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rssFeedAllColumns,
			rssFeedColumnsWithDefault,
			rssFeedColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rssFeedType, rssFeedMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rssFeedType, rssFeedMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rss_feeds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rss_feeds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into rss_feeds")
	}

	if !cached {
		rssFeedInsertCacheMut.Lock()
		rssFeedInsertCache[key] = cache
		rssFeedInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the RSSFeed, and panics on error.
// See Update for more documentation.
func (o *RSSFeed) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the RSSFeed.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RSSFeed) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	rssFeedUpdateCacheMut.RLock()
	cache, cached := rssFeedUpdateCache[key]
	rssFeedUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rssFeedAllColumns,
			rssFeedPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update rss_feeds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rss_feeds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rssFeedPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rssFeedType, rssFeedMapping, append(wl, rssFeedPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update rss_feeds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for rss_feeds")
	}

	if !cached {
		rssFeedUpdateCacheMut.Lock()
		rssFeedUpdateCache[key] = cache
		rssFeedUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q rssFeedQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q rssFeedQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for rss_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for rss_feeds")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RSSFeedSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RSSFeedSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rssFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rss_feeds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rssFeedPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in rssFeed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all rssFeed")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *RSSFeed) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RSSFeed) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no rss_feeds provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(rssFeedColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rssFeedUpsertCacheMut.RLock()
	cache, cached := rssFeedUpsertCache[key]
	rssFeedUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			rssFeedAllColumns,
			rssFeedColumnsWithDefault,
			rssFeedColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rssFeedAllColumns,
			rssFeedPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert rss_feeds, could not build update column list")
		}

		ret := strmangle.SetComplement(rssFeedAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(rssFeedPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert rss_feeds, could not build conflict column list")
			}

			conflict = make([]string, len(rssFeedPrimaryKeyColumns))
			copy(conflict, rssFeedPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rss_feeds\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(rssFeedType, rssFeedMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rssFeedType, rssFeedMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert rss_feeds")
	}

	if !cached {
		rssFeedUpsertCacheMut.Lock()
		rssFeedUpsertCache[key] = cache
		rssFeedUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single RSSFeed record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RSSFeed) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single RSSFeed record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RSSFeed) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no RSSFeed provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rssFeedPrimaryKeyMapping)
	sql := "DELETE FROM \"rss_feeds\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from rss_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for rss_feeds")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q rssFeedQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q rssFeedQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no rssFeedQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from rss_feeds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for rss_feeds")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RSSFeedSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RSSFeedSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rssFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rss_feeds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rssFeedPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from rssFeed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for rss_feeds")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *RSSFeed) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RSSFeed) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRSSFeed(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RSSFeedSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RSSFeedSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RSSFeedSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rssFeedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rss_feeds\".* FROM \"rss_feeds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rssFeedPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in RSSFeedSlice")
	}

	*o = slice

	return nil
}

// RSSFeedExistsP checks if the RSSFeed row exists. Panics on error.
func RSSFeedExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := RSSFeedExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RSSFeedExists checks if the RSSFeed row exists.
func RSSFeedExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rss_feeds\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if rss_feeds exists")
	}

	return exists, nil
}

// Exists checks if the RSSFeed row exists.
func (o *RSSFeed) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RSSFeedExists(ctx, exec, o.ID)
}
