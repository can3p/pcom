// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserSignupRequest is an object representing the database table.
type UserSignupRequest struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email              string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Reason             null.String `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	SignupAttribution  null.String `boil:"signup_attribution" json:"signup_attribution,omitempty" toml:"signup_attribution" yaml:"signup_attribution,omitempty"`
	CreatedUserID      null.String `boil:"created_user_id" json:"created_user_id,omitempty" toml:"created_user_id" yaml:"created_user_id,omitempty"`
	VerificationSentAt null.Time   `boil:"verification_sent_at" json:"verification_sent_at,omitempty" toml:"verification_sent_at" yaml:"verification_sent_at,omitempty"`
	EmailConfirmedAt   null.Time   `boil:"email_confirmed_at" json:"email_confirmed_at,omitempty" toml:"email_confirmed_at" yaml:"email_confirmed_at,omitempty"`
	CreatedAt          null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *userSignupRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userSignupRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserSignupRequestColumns = struct {
	ID                 string
	Email              string
	Reason             string
	SignupAttribution  string
	CreatedUserID      string
	VerificationSentAt string
	EmailConfirmedAt   string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	Email:              "email",
	Reason:             "reason",
	SignupAttribution:  "signup_attribution",
	CreatedUserID:      "created_user_id",
	VerificationSentAt: "verification_sent_at",
	EmailConfirmedAt:   "email_confirmed_at",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var UserSignupRequestTableColumns = struct {
	ID                 string
	Email              string
	Reason             string
	SignupAttribution  string
	CreatedUserID      string
	VerificationSentAt string
	EmailConfirmedAt   string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "user_signup_requests.id",
	Email:              "user_signup_requests.email",
	Reason:             "user_signup_requests.reason",
	SignupAttribution:  "user_signup_requests.signup_attribution",
	CreatedUserID:      "user_signup_requests.created_user_id",
	VerificationSentAt: "user_signup_requests.verification_sent_at",
	EmailConfirmedAt:   "user_signup_requests.email_confirmed_at",
	CreatedAt:          "user_signup_requests.created_at",
	UpdatedAt:          "user_signup_requests.updated_at",
}

// Generated where

var UserSignupRequestWhere = struct {
	ID                 whereHelperstring
	Email              whereHelperstring
	Reason             whereHelpernull_String
	SignupAttribution  whereHelpernull_String
	CreatedUserID      whereHelpernull_String
	VerificationSentAt whereHelpernull_Time
	EmailConfirmedAt   whereHelpernull_Time
	CreatedAt          whereHelpernull_Time
	UpdatedAt          whereHelpernull_Time
}{
	ID:                 whereHelperstring{field: "\"user_signup_requests\".\"id\""},
	Email:              whereHelperstring{field: "\"user_signup_requests\".\"email\""},
	Reason:             whereHelpernull_String{field: "\"user_signup_requests\".\"reason\""},
	SignupAttribution:  whereHelpernull_String{field: "\"user_signup_requests\".\"signup_attribution\""},
	CreatedUserID:      whereHelpernull_String{field: "\"user_signup_requests\".\"created_user_id\""},
	VerificationSentAt: whereHelpernull_Time{field: "\"user_signup_requests\".\"verification_sent_at\""},
	EmailConfirmedAt:   whereHelpernull_Time{field: "\"user_signup_requests\".\"email_confirmed_at\""},
	CreatedAt:          whereHelpernull_Time{field: "\"user_signup_requests\".\"created_at\""},
	UpdatedAt:          whereHelpernull_Time{field: "\"user_signup_requests\".\"updated_at\""},
}

// UserSignupRequestRels is where relationship names are stored.
var UserSignupRequestRels = struct {
	CreatedUser string
}{
	CreatedUser: "CreatedUser",
}

// userSignupRequestR is where relationships are stored.
type userSignupRequestR struct {
	CreatedUser *User `boil:"CreatedUser" json:"CreatedUser" toml:"CreatedUser" yaml:"CreatedUser"`
}

// NewStruct creates a new relationship struct
func (*userSignupRequestR) NewStruct() *userSignupRequestR {
	return &userSignupRequestR{}
}

func (r *userSignupRequestR) GetCreatedUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedUser
}

// userSignupRequestL is where Load methods for each relationship are stored.
type userSignupRequestL struct{}

var (
	userSignupRequestAllColumns            = []string{"id", "email", "reason", "signup_attribution", "created_user_id", "verification_sent_at", "email_confirmed_at", "created_at", "updated_at"}
	userSignupRequestColumnsWithoutDefault = []string{"id", "email"}
	userSignupRequestColumnsWithDefault    = []string{"reason", "signup_attribution", "created_user_id", "verification_sent_at", "email_confirmed_at", "created_at", "updated_at"}
	userSignupRequestPrimaryKeyColumns     = []string{"id"}
	userSignupRequestGeneratedColumns      = []string{}
)

type (
	// UserSignupRequestSlice is an alias for a slice of pointers to UserSignupRequest.
	// This should almost always be used instead of []UserSignupRequest.
	UserSignupRequestSlice []*UserSignupRequest

	userSignupRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userSignupRequestType                 = reflect.TypeOf(&UserSignupRequest{})
	userSignupRequestMapping              = queries.MakeStructMapping(userSignupRequestType)
	userSignupRequestPrimaryKeyMapping, _ = queries.BindMapping(userSignupRequestType, userSignupRequestMapping, userSignupRequestPrimaryKeyColumns)
	userSignupRequestInsertCacheMut       sync.RWMutex
	userSignupRequestInsertCache          = make(map[string]insertCache)
	userSignupRequestUpdateCacheMut       sync.RWMutex
	userSignupRequestUpdateCache          = make(map[string]updateCache)
	userSignupRequestUpsertCacheMut       sync.RWMutex
	userSignupRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single userSignupRequest record from the query, and panics on error.
func (q userSignupRequestQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *UserSignupRequest {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userSignupRequest record from the query.
func (q userSignupRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserSignupRequest, error) {
	o := &UserSignupRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for user_signup_requests")
	}

	return o, nil
}

// AllP returns all UserSignupRequest records from the query, and panics on error.
func (q userSignupRequestQuery) AllP(ctx context.Context, exec boil.ContextExecutor) UserSignupRequestSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserSignupRequest records from the query.
func (q userSignupRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSignupRequestSlice, error) {
	var o []*UserSignupRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to UserSignupRequest slice")
	}

	return o, nil
}

// CountP returns the count of all UserSignupRequest records in the query, and panics on error.
func (q userSignupRequestQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserSignupRequest records in the query.
func (q userSignupRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count user_signup_requests rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userSignupRequestQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userSignupRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if user_signup_requests exists")
	}

	return count > 0, nil
}

// CreatedUser pointed to by the foreign key.
func (o *UserSignupRequest) CreatedUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadCreatedUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userSignupRequestL) LoadCreatedUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserSignupRequest interface{}, mods queries.Applicator) error {
	var slice []*UserSignupRequest
	var object *UserSignupRequest

	if singular {
		var ok bool
		object, ok = maybeUserSignupRequest.(*UserSignupRequest)
		if !ok {
			object = new(UserSignupRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserSignupRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserSignupRequest))
			}
		}
	} else {
		s, ok := maybeUserSignupRequest.(*[]*UserSignupRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserSignupRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserSignupRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userSignupRequestR{}
		}
		if !queries.IsNil(object.CreatedUserID) {
			args[object.CreatedUserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userSignupRequestR{}
			}

			if !queries.IsNil(obj.CreatedUserID) {
				args[obj.CreatedUserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedUserUserSignupRequests = append(foreign.R.CreatedUserUserSignupRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedUserID, foreign.ID) {
				local.R.CreatedUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedUserUserSignupRequests = append(foreign.R.CreatedUserUserSignupRequests, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedUserP of the userSignupRequest to the related item.
// Sets o.R.CreatedUser to related.
// Adds o to related.R.CreatedUserUserSignupRequests.
// Panics on error.
func (o *UserSignupRequest) SetCreatedUserP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetCreatedUser(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCreatedUser of the userSignupRequest to the related item.
// Sets o.R.CreatedUser to related.
// Adds o to related.R.CreatedUserUserSignupRequests.
func (o *UserSignupRequest) SetCreatedUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_signup_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userSignupRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedUserID, related.ID)
	if o.R == nil {
		o.R = &userSignupRequestR{
			CreatedUser: related,
		}
	} else {
		o.R.CreatedUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedUserUserSignupRequests: UserSignupRequestSlice{o},
		}
	} else {
		related.R.CreatedUserUserSignupRequests = append(related.R.CreatedUserUserSignupRequests, o)
	}

	return nil
}

// RemoveCreatedUserP relationship.
// Sets o.R.CreatedUser to nil.
// Removes o from all passed in related items' relationships struct.
// Panics on error.
func (o *UserSignupRequest) RemoveCreatedUserP(ctx context.Context, exec boil.ContextExecutor, related *User) {
	if err := o.RemoveCreatedUser(ctx, exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCreatedUser relationship.
// Sets o.R.CreatedUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserSignupRequest) RemoveCreatedUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.CreatedUserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedUserUserSignupRequests {
		if queries.Equal(o.CreatedUserID, ri.CreatedUserID) {
			continue
		}

		ln := len(related.R.CreatedUserUserSignupRequests)
		if ln > 1 && i < ln-1 {
			related.R.CreatedUserUserSignupRequests[i] = related.R.CreatedUserUserSignupRequests[ln-1]
		}
		related.R.CreatedUserUserSignupRequests = related.R.CreatedUserUserSignupRequests[:ln-1]
		break
	}
	return nil
}

// UserSignupRequests retrieves all the records using an executor.
func UserSignupRequests(mods ...qm.QueryMod) userSignupRequestQuery {
	mods = append(mods, qm.From("\"user_signup_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_signup_requests\".*"})
	}

	return userSignupRequestQuery{q}
}

// FindUserSignupRequestP retrieves a single record by ID with an executor, and panics on error.
func FindUserSignupRequestP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *UserSignupRequest {
	retobj, err := FindUserSignupRequest(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserSignupRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserSignupRequest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserSignupRequest, error) {
	userSignupRequestObj := &UserSignupRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_signup_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userSignupRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from user_signup_requests")
	}

	return userSignupRequestObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserSignupRequest) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserSignupRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no user_signup_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userSignupRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userSignupRequestInsertCacheMut.RLock()
	cache, cached := userSignupRequestInsertCache[key]
	userSignupRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userSignupRequestAllColumns,
			userSignupRequestColumnsWithDefault,
			userSignupRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userSignupRequestType, userSignupRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userSignupRequestType, userSignupRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_signup_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_signup_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into user_signup_requests")
	}

	if !cached {
		userSignupRequestInsertCacheMut.Lock()
		userSignupRequestInsertCache[key] = cache
		userSignupRequestInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the UserSignupRequest, and panics on error.
// See Update for more documentation.
func (o *UserSignupRequest) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the UserSignupRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserSignupRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	userSignupRequestUpdateCacheMut.RLock()
	cache, cached := userSignupRequestUpdateCache[key]
	userSignupRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userSignupRequestAllColumns,
			userSignupRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update user_signup_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_signup_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userSignupRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userSignupRequestType, userSignupRequestMapping, append(wl, userSignupRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update user_signup_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for user_signup_requests")
	}

	if !cached {
		userSignupRequestUpdateCacheMut.Lock()
		userSignupRequestUpdateCache[key] = cache
		userSignupRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userSignupRequestQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userSignupRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for user_signup_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for user_signup_requests")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserSignupRequestSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSignupRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSignupRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_signup_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userSignupRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in userSignupRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all userSignupRequest")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserSignupRequest) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserSignupRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no user_signup_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(userSignupRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userSignupRequestUpsertCacheMut.RLock()
	cache, cached := userSignupRequestUpsertCache[key]
	userSignupRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userSignupRequestAllColumns,
			userSignupRequestColumnsWithDefault,
			userSignupRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userSignupRequestAllColumns,
			userSignupRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert user_signup_requests, could not build update column list")
		}

		ret := strmangle.SetComplement(userSignupRequestAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userSignupRequestPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert user_signup_requests, could not build conflict column list")
			}

			conflict = make([]string, len(userSignupRequestPrimaryKeyColumns))
			copy(conflict, userSignupRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_signup_requests\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userSignupRequestType, userSignupRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userSignupRequestType, userSignupRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert user_signup_requests")
	}

	if !cached {
		userSignupRequestUpsertCacheMut.Lock()
		userSignupRequestUpsertCache[key] = cache
		userSignupRequestUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single UserSignupRequest record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserSignupRequest) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single UserSignupRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserSignupRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no UserSignupRequest provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userSignupRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"user_signup_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from user_signup_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for user_signup_requests")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userSignupRequestQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userSignupRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no userSignupRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from user_signup_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for user_signup_requests")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserSignupRequestSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSignupRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSignupRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_signup_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSignupRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from userSignupRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for user_signup_requests")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserSignupRequest) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserSignupRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserSignupRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserSignupRequestSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSignupRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSignupRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSignupRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_signup_requests\".* FROM \"user_signup_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSignupRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in UserSignupRequestSlice")
	}

	*o = slice

	return nil
}

// UserSignupRequestExistsP checks if the UserSignupRequest row exists. Panics on error.
func UserSignupRequestExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := UserSignupRequestExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserSignupRequestExists checks if the UserSignupRequest row exists.
func UserSignupRequestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_signup_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if user_signup_requests exists")
	}

	return exists, nil
}

// Exists checks if the UserSignupRequest row exists.
func (o *UserSignupRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserSignupRequestExists(ctx, exec, o.ID)
}
