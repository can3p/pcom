// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserConnectionMediator is an object representing the database table.
type UserConnectionMediator struct {
	ID           string                      `boil:"id" json:"id" toml:"id" yaml:"id"`
	MediationID  string                      `boil:"mediation_id" json:"mediation_id" toml:"mediation_id" yaml:"mediation_id"`
	UserID       string                      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Decision     ConnectionMediationDecision `boil:"decision" json:"decision" toml:"decision" yaml:"decision"`
	DecidedAt    time.Time                   `boil:"decided_at" json:"decided_at" toml:"decided_at" yaml:"decided_at"`
	MediatorNote null.String                 `boil:"mediator_note" json:"mediator_note,omitempty" toml:"mediator_note" yaml:"mediator_note,omitempty"`

	R *userConnectionMediatorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userConnectionMediatorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserConnectionMediatorColumns = struct {
	ID           string
	MediationID  string
	UserID       string
	Decision     string
	DecidedAt    string
	MediatorNote string
}{
	ID:           "id",
	MediationID:  "mediation_id",
	UserID:       "user_id",
	Decision:     "decision",
	DecidedAt:    "decided_at",
	MediatorNote: "mediator_note",
}

var UserConnectionMediatorTableColumns = struct {
	ID           string
	MediationID  string
	UserID       string
	Decision     string
	DecidedAt    string
	MediatorNote string
}{
	ID:           "user_connection_mediators.id",
	MediationID:  "user_connection_mediators.mediation_id",
	UserID:       "user_connection_mediators.user_id",
	Decision:     "user_connection_mediators.decision",
	DecidedAt:    "user_connection_mediators.decided_at",
	MediatorNote: "user_connection_mediators.mediator_note",
}

// Generated where

type whereHelperConnectionMediationDecision struct{ field string }

func (w whereHelperConnectionMediationDecision) EQ(x ConnectionMediationDecision) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperConnectionMediationDecision) NEQ(x ConnectionMediationDecision) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperConnectionMediationDecision) LT(x ConnectionMediationDecision) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperConnectionMediationDecision) LTE(x ConnectionMediationDecision) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperConnectionMediationDecision) GT(x ConnectionMediationDecision) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperConnectionMediationDecision) GTE(x ConnectionMediationDecision) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperConnectionMediationDecision) IN(slice []ConnectionMediationDecision) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperConnectionMediationDecision) NIN(slice []ConnectionMediationDecision) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var UserConnectionMediatorWhere = struct {
	ID           whereHelperstring
	MediationID  whereHelperstring
	UserID       whereHelperstring
	Decision     whereHelperConnectionMediationDecision
	DecidedAt    whereHelpertime_Time
	MediatorNote whereHelpernull_String
}{
	ID:           whereHelperstring{field: "\"user_connection_mediators\".\"id\""},
	MediationID:  whereHelperstring{field: "\"user_connection_mediators\".\"mediation_id\""},
	UserID:       whereHelperstring{field: "\"user_connection_mediators\".\"user_id\""},
	Decision:     whereHelperConnectionMediationDecision{field: "\"user_connection_mediators\".\"decision\""},
	DecidedAt:    whereHelpertime_Time{field: "\"user_connection_mediators\".\"decided_at\""},
	MediatorNote: whereHelpernull_String{field: "\"user_connection_mediators\".\"mediator_note\""},
}

// UserConnectionMediatorRels is where relationship names are stored.
var UserConnectionMediatorRels = struct {
	Mediation string
	User      string
}{
	Mediation: "Mediation",
	User:      "User",
}

// userConnectionMediatorR is where relationships are stored.
type userConnectionMediatorR struct {
	Mediation *UserConnectionMediationRequest `boil:"Mediation" json:"Mediation" toml:"Mediation" yaml:"Mediation"`
	User      *User                           `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userConnectionMediatorR) NewStruct() *userConnectionMediatorR {
	return &userConnectionMediatorR{}
}

func (r *userConnectionMediatorR) GetMediation() *UserConnectionMediationRequest {
	if r == nil {
		return nil
	}
	return r.Mediation
}

func (r *userConnectionMediatorR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userConnectionMediatorL is where Load methods for each relationship are stored.
type userConnectionMediatorL struct{}

var (
	userConnectionMediatorAllColumns            = []string{"id", "mediation_id", "user_id", "decision", "decided_at", "mediator_note"}
	userConnectionMediatorColumnsWithoutDefault = []string{"id", "mediation_id", "user_id", "decision", "decided_at"}
	userConnectionMediatorColumnsWithDefault    = []string{"mediator_note"}
	userConnectionMediatorPrimaryKeyColumns     = []string{"id"}
	userConnectionMediatorGeneratedColumns      = []string{}
)

type (
	// UserConnectionMediatorSlice is an alias for a slice of pointers to UserConnectionMediator.
	// This should almost always be used instead of []UserConnectionMediator.
	UserConnectionMediatorSlice []*UserConnectionMediator

	userConnectionMediatorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userConnectionMediatorType                 = reflect.TypeOf(&UserConnectionMediator{})
	userConnectionMediatorMapping              = queries.MakeStructMapping(userConnectionMediatorType)
	userConnectionMediatorPrimaryKeyMapping, _ = queries.BindMapping(userConnectionMediatorType, userConnectionMediatorMapping, userConnectionMediatorPrimaryKeyColumns)
	userConnectionMediatorInsertCacheMut       sync.RWMutex
	userConnectionMediatorInsertCache          = make(map[string]insertCache)
	userConnectionMediatorUpdateCacheMut       sync.RWMutex
	userConnectionMediatorUpdateCache          = make(map[string]updateCache)
	userConnectionMediatorUpsertCacheMut       sync.RWMutex
	userConnectionMediatorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single userConnectionMediator record from the query, and panics on error.
func (q userConnectionMediatorQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *UserConnectionMediator {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userConnectionMediator record from the query.
func (q userConnectionMediatorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserConnectionMediator, error) {
	o := &UserConnectionMediator{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for user_connection_mediators")
	}

	return o, nil
}

// AllP returns all UserConnectionMediator records from the query, and panics on error.
func (q userConnectionMediatorQuery) AllP(ctx context.Context, exec boil.ContextExecutor) UserConnectionMediatorSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserConnectionMediator records from the query.
func (q userConnectionMediatorQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserConnectionMediatorSlice, error) {
	var o []*UserConnectionMediator

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to UserConnectionMediator slice")
	}

	return o, nil
}

// CountP returns the count of all UserConnectionMediator records in the query, and panics on error.
func (q userConnectionMediatorQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserConnectionMediator records in the query.
func (q userConnectionMediatorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count user_connection_mediators rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userConnectionMediatorQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userConnectionMediatorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if user_connection_mediators exists")
	}

	return count > 0, nil
}

// Mediation pointed to by the foreign key.
func (o *UserConnectionMediator) Mediation(mods ...qm.QueryMod) userConnectionMediationRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MediationID),
	}

	queryMods = append(queryMods, mods...)

	return UserConnectionMediationRequests(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserConnectionMediator) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadMediation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userConnectionMediatorL) LoadMediation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserConnectionMediator interface{}, mods queries.Applicator) error {
	var slice []*UserConnectionMediator
	var object *UserConnectionMediator

	if singular {
		var ok bool
		object, ok = maybeUserConnectionMediator.(*UserConnectionMediator)
		if !ok {
			object = new(UserConnectionMediator)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserConnectionMediator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserConnectionMediator))
			}
		}
	} else {
		s, ok := maybeUserConnectionMediator.(*[]*UserConnectionMediator)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserConnectionMediator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserConnectionMediator))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userConnectionMediatorR{}
		}
		args[object.MediationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userConnectionMediatorR{}
			}

			args[obj.MediationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_connection_mediation_requests`),
		qm.WhereIn(`user_connection_mediation_requests.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserConnectionMediationRequest")
	}

	var resultSlice []*UserConnectionMediationRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserConnectionMediationRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_connection_mediation_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_connection_mediation_requests")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mediation = foreign
		if foreign.R == nil {
			foreign.R = &userConnectionMediationRequestR{}
		}
		foreign.R.MediationUserConnectionMediators = append(foreign.R.MediationUserConnectionMediators, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MediationID == foreign.ID {
				local.R.Mediation = foreign
				if foreign.R == nil {
					foreign.R = &userConnectionMediationRequestR{}
				}
				foreign.R.MediationUserConnectionMediators = append(foreign.R.MediationUserConnectionMediators, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userConnectionMediatorL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserConnectionMediator interface{}, mods queries.Applicator) error {
	var slice []*UserConnectionMediator
	var object *UserConnectionMediator

	if singular {
		var ok bool
		object, ok = maybeUserConnectionMediator.(*UserConnectionMediator)
		if !ok {
			object = new(UserConnectionMediator)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserConnectionMediator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserConnectionMediator))
			}
		}
	} else {
		s, ok := maybeUserConnectionMediator.(*[]*UserConnectionMediator)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserConnectionMediator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserConnectionMediator))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userConnectionMediatorR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userConnectionMediatorR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserConnectionMediators = append(foreign.R.UserConnectionMediators, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserConnectionMediators = append(foreign.R.UserConnectionMediators, local)
				break
			}
		}
	}

	return nil
}

// SetMediationP of the userConnectionMediator to the related item.
// Sets o.R.Mediation to related.
// Adds o to related.R.MediationUserConnectionMediators.
// Panics on error.
func (o *UserConnectionMediator) SetMediationP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserConnectionMediationRequest) {
	if err := o.SetMediation(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMediation of the userConnectionMediator to the related item.
// Sets o.R.Mediation to related.
// Adds o to related.R.MediationUserConnectionMediators.
func (o *UserConnectionMediator) SetMediation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserConnectionMediationRequest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_connection_mediators\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mediation_id"}),
		strmangle.WhereClause("\"", "\"", 2, userConnectionMediatorPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MediationID = related.ID
	if o.R == nil {
		o.R = &userConnectionMediatorR{
			Mediation: related,
		}
	} else {
		o.R.Mediation = related
	}

	if related.R == nil {
		related.R = &userConnectionMediationRequestR{
			MediationUserConnectionMediators: UserConnectionMediatorSlice{o},
		}
	} else {
		related.R.MediationUserConnectionMediators = append(related.R.MediationUserConnectionMediators, o)
	}

	return nil
}

// SetUserP of the userConnectionMediator to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserConnectionMediators.
// Panics on error.
func (o *UserConnectionMediator) SetUserP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetUser(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the userConnectionMediator to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserConnectionMediators.
func (o *UserConnectionMediator) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_connection_mediators\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userConnectionMediatorPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userConnectionMediatorR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserConnectionMediators: UserConnectionMediatorSlice{o},
		}
	} else {
		related.R.UserConnectionMediators = append(related.R.UserConnectionMediators, o)
	}

	return nil
}

// UserConnectionMediators retrieves all the records using an executor.
func UserConnectionMediators(mods ...qm.QueryMod) userConnectionMediatorQuery {
	mods = append(mods, qm.From("\"user_connection_mediators\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_connection_mediators\".*"})
	}

	return userConnectionMediatorQuery{q}
}

// FindUserConnectionMediatorP retrieves a single record by ID with an executor, and panics on error.
func FindUserConnectionMediatorP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *UserConnectionMediator {
	retobj, err := FindUserConnectionMediator(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserConnectionMediator retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserConnectionMediator(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserConnectionMediator, error) {
	userConnectionMediatorObj := &UserConnectionMediator{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_connection_mediators\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userConnectionMediatorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from user_connection_mediators")
	}

	return userConnectionMediatorObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserConnectionMediator) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserConnectionMediator) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no user_connection_mediators provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(userConnectionMediatorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userConnectionMediatorInsertCacheMut.RLock()
	cache, cached := userConnectionMediatorInsertCache[key]
	userConnectionMediatorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userConnectionMediatorAllColumns,
			userConnectionMediatorColumnsWithDefault,
			userConnectionMediatorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userConnectionMediatorType, userConnectionMediatorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userConnectionMediatorType, userConnectionMediatorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_connection_mediators\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_connection_mediators\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into user_connection_mediators")
	}

	if !cached {
		userConnectionMediatorInsertCacheMut.Lock()
		userConnectionMediatorInsertCache[key] = cache
		userConnectionMediatorInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the UserConnectionMediator, and panics on error.
// See Update for more documentation.
func (o *UserConnectionMediator) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the UserConnectionMediator.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserConnectionMediator) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	userConnectionMediatorUpdateCacheMut.RLock()
	cache, cached := userConnectionMediatorUpdateCache[key]
	userConnectionMediatorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userConnectionMediatorAllColumns,
			userConnectionMediatorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update user_connection_mediators, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_connection_mediators\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userConnectionMediatorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userConnectionMediatorType, userConnectionMediatorMapping, append(wl, userConnectionMediatorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update user_connection_mediators row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for user_connection_mediators")
	}

	if !cached {
		userConnectionMediatorUpdateCacheMut.Lock()
		userConnectionMediatorUpdateCache[key] = cache
		userConnectionMediatorUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userConnectionMediatorQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userConnectionMediatorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for user_connection_mediators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for user_connection_mediators")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserConnectionMediatorSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserConnectionMediatorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userConnectionMediatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_connection_mediators\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userConnectionMediatorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in userConnectionMediator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all userConnectionMediator")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserConnectionMediator) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserConnectionMediator) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no user_connection_mediators provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(userConnectionMediatorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userConnectionMediatorUpsertCacheMut.RLock()
	cache, cached := userConnectionMediatorUpsertCache[key]
	userConnectionMediatorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userConnectionMediatorAllColumns,
			userConnectionMediatorColumnsWithDefault,
			userConnectionMediatorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userConnectionMediatorAllColumns,
			userConnectionMediatorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert user_connection_mediators, could not build update column list")
		}

		ret := strmangle.SetComplement(userConnectionMediatorAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userConnectionMediatorPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert user_connection_mediators, could not build conflict column list")
			}

			conflict = make([]string, len(userConnectionMediatorPrimaryKeyColumns))
			copy(conflict, userConnectionMediatorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_connection_mediators\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userConnectionMediatorType, userConnectionMediatorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userConnectionMediatorType, userConnectionMediatorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert user_connection_mediators")
	}

	if !cached {
		userConnectionMediatorUpsertCacheMut.Lock()
		userConnectionMediatorUpsertCache[key] = cache
		userConnectionMediatorUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single UserConnectionMediator record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserConnectionMediator) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single UserConnectionMediator record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserConnectionMediator) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no UserConnectionMediator provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userConnectionMediatorPrimaryKeyMapping)
	sql := "DELETE FROM \"user_connection_mediators\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from user_connection_mediators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for user_connection_mediators")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userConnectionMediatorQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userConnectionMediatorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no userConnectionMediatorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from user_connection_mediators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for user_connection_mediators")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserConnectionMediatorSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserConnectionMediatorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userConnectionMediatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_connection_mediators\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userConnectionMediatorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from userConnectionMediator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for user_connection_mediators")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserConnectionMediator) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserConnectionMediator) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserConnectionMediator(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserConnectionMediatorSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserConnectionMediatorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserConnectionMediatorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userConnectionMediatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_connection_mediators\".* FROM \"user_connection_mediators\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userConnectionMediatorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in UserConnectionMediatorSlice")
	}

	*o = slice

	return nil
}

// UserConnectionMediatorExistsP checks if the UserConnectionMediator row exists. Panics on error.
func UserConnectionMediatorExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := UserConnectionMediatorExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserConnectionMediatorExists checks if the UserConnectionMediator row exists.
func UserConnectionMediatorExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_connection_mediators\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if user_connection_mediators exists")
	}

	return exists, nil
}

// Exists checks if the UserConnectionMediator row exists.
func (o *UserConnectionMediator) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserConnectionMediatorExists(ctx, exec, o.ID)
}
