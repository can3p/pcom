// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserFeedItem is an object representing the database table.
type UserFeedItem struct {
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	RSSItemID   string    `boil:"rss_item_id" json:"rss_item_id" toml:"rss_item_id" yaml:"rss_item_id"`
	URLID       string    `boil:"url_id" json:"url_id" toml:"url_id" yaml:"url_id"`
	IsDismissed bool      `boil:"is_dismissed" json:"is_dismissed" toml:"is_dismissed" yaml:"is_dismissed"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userFeedItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userFeedItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserFeedItemColumns = struct {
	ID          string
	UserID      string
	RSSItemID   string
	URLID       string
	IsDismissed string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	UserID:      "user_id",
	RSSItemID:   "rss_item_id",
	URLID:       "url_id",
	IsDismissed: "is_dismissed",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var UserFeedItemTableColumns = struct {
	ID          string
	UserID      string
	RSSItemID   string
	URLID       string
	IsDismissed string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "user_feed_items.id",
	UserID:      "user_feed_items.user_id",
	RSSItemID:   "user_feed_items.rss_item_id",
	URLID:       "user_feed_items.url_id",
	IsDismissed: "user_feed_items.is_dismissed",
	CreatedAt:   "user_feed_items.created_at",
	UpdatedAt:   "user_feed_items.updated_at",
}

// Generated where

var UserFeedItemWhere = struct {
	ID          whereHelperstring
	UserID      whereHelperstring
	RSSItemID   whereHelperstring
	URLID       whereHelperstring
	IsDismissed whereHelperbool
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"user_feed_items\".\"id\""},
	UserID:      whereHelperstring{field: "\"user_feed_items\".\"user_id\""},
	RSSItemID:   whereHelperstring{field: "\"user_feed_items\".\"rss_item_id\""},
	URLID:       whereHelperstring{field: "\"user_feed_items\".\"url_id\""},
	IsDismissed: whereHelperbool{field: "\"user_feed_items\".\"is_dismissed\""},
	CreatedAt:   whereHelpertime_Time{field: "\"user_feed_items\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"user_feed_items\".\"updated_at\""},
}

// UserFeedItemRels is where relationship names are stored.
var UserFeedItemRels = struct {
	RSSItem string
	URL     string
	User    string
}{
	RSSItem: "RSSItem",
	URL:     "URL",
	User:    "User",
}

// userFeedItemR is where relationships are stored.
type userFeedItemR struct {
	RSSItem *RSSItem       `boil:"RSSItem" json:"RSSItem" toml:"RSSItem" yaml:"RSSItem"`
	URL     *NormalizedURL `boil:"URL" json:"URL" toml:"URL" yaml:"URL"`
	User    *User          `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userFeedItemR) NewStruct() *userFeedItemR {
	return &userFeedItemR{}
}

func (r *userFeedItemR) GetRSSItem() *RSSItem {
	if r == nil {
		return nil
	}
	return r.RSSItem
}

func (r *userFeedItemR) GetURL() *NormalizedURL {
	if r == nil {
		return nil
	}
	return r.URL
}

func (r *userFeedItemR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userFeedItemL is where Load methods for each relationship are stored.
type userFeedItemL struct{}

var (
	userFeedItemAllColumns            = []string{"id", "user_id", "rss_item_id", "url_id", "is_dismissed", "created_at", "updated_at"}
	userFeedItemColumnsWithoutDefault = []string{"id", "user_id", "rss_item_id", "url_id", "is_dismissed", "created_at", "updated_at"}
	userFeedItemColumnsWithDefault    = []string{}
	userFeedItemPrimaryKeyColumns     = []string{"id"}
	userFeedItemGeneratedColumns      = []string{}
)

type (
	// UserFeedItemSlice is an alias for a slice of pointers to UserFeedItem.
	// This should almost always be used instead of []UserFeedItem.
	UserFeedItemSlice []*UserFeedItem

	userFeedItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userFeedItemType                 = reflect.TypeOf(&UserFeedItem{})
	userFeedItemMapping              = queries.MakeStructMapping(userFeedItemType)
	userFeedItemPrimaryKeyMapping, _ = queries.BindMapping(userFeedItemType, userFeedItemMapping, userFeedItemPrimaryKeyColumns)
	userFeedItemInsertCacheMut       sync.RWMutex
	userFeedItemInsertCache          = make(map[string]insertCache)
	userFeedItemUpdateCacheMut       sync.RWMutex
	userFeedItemUpdateCache          = make(map[string]updateCache)
	userFeedItemUpsertCacheMut       sync.RWMutex
	userFeedItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single userFeedItem record from the query, and panics on error.
func (q userFeedItemQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *UserFeedItem {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userFeedItem record from the query.
func (q userFeedItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserFeedItem, error) {
	o := &UserFeedItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for user_feed_items")
	}

	return o, nil
}

// AllP returns all UserFeedItem records from the query, and panics on error.
func (q userFeedItemQuery) AllP(ctx context.Context, exec boil.ContextExecutor) UserFeedItemSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserFeedItem records from the query.
func (q userFeedItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserFeedItemSlice, error) {
	var o []*UserFeedItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to UserFeedItem slice")
	}

	return o, nil
}

// CountP returns the count of all UserFeedItem records in the query, and panics on error.
func (q userFeedItemQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserFeedItem records in the query.
func (q userFeedItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count user_feed_items rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userFeedItemQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userFeedItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if user_feed_items exists")
	}

	return count > 0, nil
}

// RSSItem pointed to by the foreign key.
func (o *UserFeedItem) RSSItem(mods ...qm.QueryMod) rssItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RSSItemID),
	}

	queryMods = append(queryMods, mods...)

	return RSSItems(queryMods...)
}

// URL pointed to by the foreign key.
func (o *UserFeedItem) URL(mods ...qm.QueryMod) normalizedURLQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.URLID),
	}

	queryMods = append(queryMods, mods...)

	return NormalizedUrls(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserFeedItem) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadRSSItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userFeedItemL) LoadRSSItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserFeedItem interface{}, mods queries.Applicator) error {
	var slice []*UserFeedItem
	var object *UserFeedItem

	if singular {
		var ok bool
		object, ok = maybeUserFeedItem.(*UserFeedItem)
		if !ok {
			object = new(UserFeedItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserFeedItem))
			}
		}
	} else {
		s, ok := maybeUserFeedItem.(*[]*UserFeedItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserFeedItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userFeedItemR{}
		}
		args[object.RSSItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userFeedItemR{}
			}

			args[obj.RSSItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rss_items`),
		qm.WhereIn(`rss_items.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RSSItem")
	}

	var resultSlice []*RSSItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RSSItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rss_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rss_items")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RSSItem = foreign
		if foreign.R == nil {
			foreign.R = &rssItemR{}
		}
		foreign.R.UserFeedItems = append(foreign.R.UserFeedItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RSSItemID == foreign.ID {
				local.R.RSSItem = foreign
				if foreign.R == nil {
					foreign.R = &rssItemR{}
				}
				foreign.R.UserFeedItems = append(foreign.R.UserFeedItems, local)
				break
			}
		}
	}

	return nil
}

// LoadURL allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userFeedItemL) LoadURL(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserFeedItem interface{}, mods queries.Applicator) error {
	var slice []*UserFeedItem
	var object *UserFeedItem

	if singular {
		var ok bool
		object, ok = maybeUserFeedItem.(*UserFeedItem)
		if !ok {
			object = new(UserFeedItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserFeedItem))
			}
		}
	} else {
		s, ok := maybeUserFeedItem.(*[]*UserFeedItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserFeedItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userFeedItemR{}
		}
		args[object.URLID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userFeedItemR{}
			}

			args[obj.URLID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`normalized_urls`),
		qm.WhereIn(`normalized_urls.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NormalizedURL")
	}

	var resultSlice []*NormalizedURL
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NormalizedURL")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for normalized_urls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for normalized_urls")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.URL = foreign
		if foreign.R == nil {
			foreign.R = &normalizedURLR{}
		}
		foreign.R.URLUserFeedItems = append(foreign.R.URLUserFeedItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.URLID == foreign.ID {
				local.R.URL = foreign
				if foreign.R == nil {
					foreign.R = &normalizedURLR{}
				}
				foreign.R.URLUserFeedItems = append(foreign.R.URLUserFeedItems, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userFeedItemL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserFeedItem interface{}, mods queries.Applicator) error {
	var slice []*UserFeedItem
	var object *UserFeedItem

	if singular {
		var ok bool
		object, ok = maybeUserFeedItem.(*UserFeedItem)
		if !ok {
			object = new(UserFeedItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserFeedItem))
			}
		}
	} else {
		s, ok := maybeUserFeedItem.(*[]*UserFeedItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserFeedItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserFeedItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userFeedItemR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userFeedItemR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserFeedItems = append(foreign.R.UserFeedItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserFeedItems = append(foreign.R.UserFeedItems, local)
				break
			}
		}
	}

	return nil
}

// SetRSSItemP of the userFeedItem to the related item.
// Sets o.R.RSSItem to related.
// Adds o to related.R.UserFeedItems.
// Panics on error.
func (o *UserFeedItem) SetRSSItemP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RSSItem) {
	if err := o.SetRSSItem(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRSSItem of the userFeedItem to the related item.
// Sets o.R.RSSItem to related.
// Adds o to related.R.UserFeedItems.
func (o *UserFeedItem) SetRSSItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RSSItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_feed_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"rss_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, userFeedItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RSSItemID = related.ID
	if o.R == nil {
		o.R = &userFeedItemR{
			RSSItem: related,
		}
	} else {
		o.R.RSSItem = related
	}

	if related.R == nil {
		related.R = &rssItemR{
			UserFeedItems: UserFeedItemSlice{o},
		}
	} else {
		related.R.UserFeedItems = append(related.R.UserFeedItems, o)
	}

	return nil
}

// SetURLP of the userFeedItem to the related item.
// Sets o.R.URL to related.
// Adds o to related.R.URLUserFeedItems.
// Panics on error.
func (o *UserFeedItem) SetURLP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NormalizedURL) {
	if err := o.SetURL(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetURL of the userFeedItem to the related item.
// Sets o.R.URL to related.
// Adds o to related.R.URLUserFeedItems.
func (o *UserFeedItem) SetURL(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NormalizedURL) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_feed_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"url_id"}),
		strmangle.WhereClause("\"", "\"", 2, userFeedItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.URLID = related.ID
	if o.R == nil {
		o.R = &userFeedItemR{
			URL: related,
		}
	} else {
		o.R.URL = related
	}

	if related.R == nil {
		related.R = &normalizedURLR{
			URLUserFeedItems: UserFeedItemSlice{o},
		}
	} else {
		related.R.URLUserFeedItems = append(related.R.URLUserFeedItems, o)
	}

	return nil
}

// SetUserP of the userFeedItem to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserFeedItems.
// Panics on error.
func (o *UserFeedItem) SetUserP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetUser(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the userFeedItem to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserFeedItems.
func (o *UserFeedItem) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_feed_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userFeedItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userFeedItemR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserFeedItems: UserFeedItemSlice{o},
		}
	} else {
		related.R.UserFeedItems = append(related.R.UserFeedItems, o)
	}

	return nil
}

// UserFeedItems retrieves all the records using an executor.
func UserFeedItems(mods ...qm.QueryMod) userFeedItemQuery {
	mods = append(mods, qm.From("\"user_feed_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_feed_items\".*"})
	}

	return userFeedItemQuery{q}
}

// FindUserFeedItemP retrieves a single record by ID with an executor, and panics on error.
func FindUserFeedItemP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *UserFeedItem {
	retobj, err := FindUserFeedItem(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserFeedItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserFeedItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserFeedItem, error) {
	userFeedItemObj := &UserFeedItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_feed_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userFeedItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from user_feed_items")
	}

	return userFeedItemObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserFeedItem) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserFeedItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no user_feed_items provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userFeedItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userFeedItemInsertCacheMut.RLock()
	cache, cached := userFeedItemInsertCache[key]
	userFeedItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userFeedItemAllColumns,
			userFeedItemColumnsWithDefault,
			userFeedItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userFeedItemType, userFeedItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userFeedItemType, userFeedItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_feed_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_feed_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into user_feed_items")
	}

	if !cached {
		userFeedItemInsertCacheMut.Lock()
		userFeedItemInsertCache[key] = cache
		userFeedItemInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the UserFeedItem, and panics on error.
// See Update for more documentation.
func (o *UserFeedItem) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the UserFeedItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserFeedItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	userFeedItemUpdateCacheMut.RLock()
	cache, cached := userFeedItemUpdateCache[key]
	userFeedItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userFeedItemAllColumns,
			userFeedItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update user_feed_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_feed_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userFeedItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userFeedItemType, userFeedItemMapping, append(wl, userFeedItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update user_feed_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for user_feed_items")
	}

	if !cached {
		userFeedItemUpdateCacheMut.Lock()
		userFeedItemUpdateCache[key] = cache
		userFeedItemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userFeedItemQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userFeedItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for user_feed_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for user_feed_items")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserFeedItemSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserFeedItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFeedItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_feed_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userFeedItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in userFeedItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all userFeedItem")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserFeedItem) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserFeedItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no user_feed_items provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(userFeedItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userFeedItemUpsertCacheMut.RLock()
	cache, cached := userFeedItemUpsertCache[key]
	userFeedItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userFeedItemAllColumns,
			userFeedItemColumnsWithDefault,
			userFeedItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userFeedItemAllColumns,
			userFeedItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert user_feed_items, could not build update column list")
		}

		ret := strmangle.SetComplement(userFeedItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userFeedItemPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert user_feed_items, could not build conflict column list")
			}

			conflict = make([]string, len(userFeedItemPrimaryKeyColumns))
			copy(conflict, userFeedItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_feed_items\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userFeedItemType, userFeedItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userFeedItemType, userFeedItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert user_feed_items")
	}

	if !cached {
		userFeedItemUpsertCacheMut.Lock()
		userFeedItemUpsertCache[key] = cache
		userFeedItemUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single UserFeedItem record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserFeedItem) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single UserFeedItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserFeedItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no UserFeedItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userFeedItemPrimaryKeyMapping)
	sql := "DELETE FROM \"user_feed_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from user_feed_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for user_feed_items")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userFeedItemQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userFeedItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no userFeedItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from user_feed_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for user_feed_items")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserFeedItemSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserFeedItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFeedItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_feed_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userFeedItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from userFeedItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for user_feed_items")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserFeedItem) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserFeedItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserFeedItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserFeedItemSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserFeedItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserFeedItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFeedItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_feed_items\".* FROM \"user_feed_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userFeedItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in UserFeedItemSlice")
	}

	*o = slice

	return nil
}

// UserFeedItemExistsP checks if the UserFeedItem row exists. Panics on error.
func UserFeedItemExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := UserFeedItemExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserFeedItemExists checks if the UserFeedItem row exists.
func UserFeedItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_feed_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if user_feed_items exists")
	}

	return exists, nil
}

// Exists checks if the UserFeedItem row exists.
func (o *UserFeedItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserFeedItemExists(ctx, exec, o.ID)
}
