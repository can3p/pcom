// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// User is an object representing the database table.
type User struct {
	ID                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email             string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	CreatedAt         null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt         null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Timezone          string      `boil:"timezone" json:"timezone" toml:"timezone" yaml:"timezone"`
	EmailConfirmedAt  null.Time   `boil:"email_confirmed_at" json:"email_confirmed_at,omitempty" toml:"email_confirmed_at" yaml:"email_confirmed_at,omitempty"`
	EmailConfirmSeed  null.String `boil:"email_confirm_seed" json:"email_confirm_seed,omitempty" toml:"email_confirm_seed" yaml:"email_confirm_seed,omitempty"`
	SignupAttribution null.String `boil:"signup_attribution" json:"signup_attribution,omitempty" toml:"signup_attribution" yaml:"signup_attribution,omitempty"`
	Pwdhash           null.String `boil:"pwdhash" json:"pwdhash,omitempty" toml:"pwdhash" yaml:"pwdhash,omitempty"`

	R *userR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID                string
	Email             string
	CreatedAt         string
	UpdatedAt         string
	Timezone          string
	EmailConfirmedAt  string
	EmailConfirmSeed  string
	SignupAttribution string
	Pwdhash           string
}{
	ID:                "id",
	Email:             "email",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	Timezone:          "timezone",
	EmailConfirmedAt:  "email_confirmed_at",
	EmailConfirmSeed:  "email_confirm_seed",
	SignupAttribution: "signup_attribution",
	Pwdhash:           "pwdhash",
}

var UserTableColumns = struct {
	ID                string
	Email             string
	CreatedAt         string
	UpdatedAt         string
	Timezone          string
	EmailConfirmedAt  string
	EmailConfirmSeed  string
	SignupAttribution string
	Pwdhash           string
}{
	ID:                "users.id",
	Email:             "users.email",
	CreatedAt:         "users.created_at",
	UpdatedAt:         "users.updated_at",
	Timezone:          "users.timezone",
	EmailConfirmedAt:  "users.email_confirmed_at",
	EmailConfirmSeed:  "users.email_confirm_seed",
	SignupAttribution: "users.signup_attribution",
	Pwdhash:           "users.pwdhash",
}

// Generated where

var UserWhere = struct {
	ID                whereHelperstring
	Email             whereHelperstring
	CreatedAt         whereHelpernull_Time
	UpdatedAt         whereHelpernull_Time
	Timezone          whereHelperstring
	EmailConfirmedAt  whereHelpernull_Time
	EmailConfirmSeed  whereHelpernull_String
	SignupAttribution whereHelpernull_String
	Pwdhash           whereHelpernull_String
}{
	ID:                whereHelperstring{field: "\"users\".\"id\""},
	Email:             whereHelperstring{field: "\"users\".\"email\""},
	CreatedAt:         whereHelpernull_Time{field: "\"users\".\"created_at\""},
	UpdatedAt:         whereHelpernull_Time{field: "\"users\".\"updated_at\""},
	Timezone:          whereHelperstring{field: "\"users\".\"timezone\""},
	EmailConfirmedAt:  whereHelpernull_Time{field: "\"users\".\"email_confirmed_at\""},
	EmailConfirmSeed:  whereHelpernull_String{field: "\"users\".\"email_confirm_seed\""},
	SignupAttribution: whereHelpernull_String{field: "\"users\".\"signup_attribution\""},
	Pwdhash:           whereHelpernull_String{field: "\"users\".\"pwdhash\""},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	CreatedUserUserInvitations    string
	UserInvitations               string
	CreatedUserUserSignupRequests string
}{
	CreatedUserUserInvitations:    "CreatedUserUserInvitations",
	UserInvitations:               "UserInvitations",
	CreatedUserUserSignupRequests: "CreatedUserUserSignupRequests",
}

// userR is where relationships are stored.
type userR struct {
	CreatedUserUserInvitations    UserInvitationSlice    `boil:"CreatedUserUserInvitations" json:"CreatedUserUserInvitations" toml:"CreatedUserUserInvitations" yaml:"CreatedUserUserInvitations"`
	UserInvitations               UserInvitationSlice    `boil:"UserInvitations" json:"UserInvitations" toml:"UserInvitations" yaml:"UserInvitations"`
	CreatedUserUserSignupRequests UserSignupRequestSlice `boil:"CreatedUserUserSignupRequests" json:"CreatedUserUserSignupRequests" toml:"CreatedUserUserSignupRequests" yaml:"CreatedUserUserSignupRequests"`
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

func (r *userR) GetCreatedUserUserInvitations() UserInvitationSlice {
	if r == nil {
		return nil
	}
	return r.CreatedUserUserInvitations
}

func (r *userR) GetUserInvitations() UserInvitationSlice {
	if r == nil {
		return nil
	}
	return r.UserInvitations
}

func (r *userR) GetCreatedUserUserSignupRequests() UserSignupRequestSlice {
	if r == nil {
		return nil
	}
	return r.CreatedUserUserSignupRequests
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"id", "email", "created_at", "updated_at", "timezone", "email_confirmed_at", "email_confirm_seed", "signup_attribution", "pwdhash"}
	userColumnsWithoutDefault = []string{"id", "email", "timezone"}
	userColumnsWithDefault    = []string{"created_at", "updated_at", "email_confirmed_at", "email_confirm_seed", "signup_attribution", "pwdhash"}
	userPrimaryKeyColumns     = []string{"id"}
	userGeneratedColumns      = []string{}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should almost always be used instead of []User.
	UserSlice []*User

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single user record from the query, and panics on error.
func (q userQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *User {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single user record from the query.
func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for users")
	}

	return o, nil
}

// AllP returns all User records from the query, and panics on error.
func (q userQuery) AllP(ctx context.Context, exec boil.ContextExecutor) UserSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all User records from the query.
func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error) {
	var o []*User

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to User slice")
	}

	return o, nil
}

// CountP returns the count of all User records in the query, and panics on error.
func (q userQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all User records in the query.
func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count users rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if users exists")
	}

	return count > 0, nil
}

// CreatedUserUserInvitations retrieves all the user_invitation's UserInvitations with an executor via created_user_id column.
func (o *User) CreatedUserUserInvitations(mods ...qm.QueryMod) userInvitationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_invitations\".\"created_user_id\"=?", o.ID),
	)

	return UserInvitations(queryMods...)
}

// UserInvitations retrieves all the user_invitation's UserInvitations with an executor.
func (o *User) UserInvitations(mods ...qm.QueryMod) userInvitationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_invitations\".\"user_id\"=?", o.ID),
	)

	return UserInvitations(queryMods...)
}

// CreatedUserUserSignupRequests retrieves all the user_signup_request's UserSignupRequests with an executor via created_user_id column.
func (o *User) CreatedUserUserSignupRequests(mods ...qm.QueryMod) userSignupRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_signup_requests\".\"created_user_id\"=?", o.ID),
	)

	return UserSignupRequests(queryMods...)
}

// LoadCreatedUserUserInvitations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedUserUserInvitations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_invitations`),
		qm.WhereIn(`user_invitations.created_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_invitations")
	}

	var resultSlice []*UserInvitation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_invitations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_invitations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_invitations")
	}

	if singular {
		object.R.CreatedUserUserInvitations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userInvitationR{}
			}
			foreign.R.CreatedUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedUserID) {
				local.R.CreatedUserUserInvitations = append(local.R.CreatedUserUserInvitations, foreign)
				if foreign.R == nil {
					foreign.R = &userInvitationR{}
				}
				foreign.R.CreatedUser = local
				break
			}
		}
	}

	return nil
}

// LoadUserInvitations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUserInvitations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_invitations`),
		qm.WhereIn(`user_invitations.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_invitations")
	}

	var resultSlice []*UserInvitation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_invitations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_invitations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_invitations")
	}

	if singular {
		object.R.UserInvitations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userInvitationR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserInvitations = append(local.R.UserInvitations, foreign)
				if foreign.R == nil {
					foreign.R = &userInvitationR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedUserUserSignupRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedUserUserSignupRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_signup_requests`),
		qm.WhereIn(`user_signup_requests.created_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_signup_requests")
	}

	var resultSlice []*UserSignupRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_signup_requests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_signup_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_signup_requests")
	}

	if singular {
		object.R.CreatedUserUserSignupRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userSignupRequestR{}
			}
			foreign.R.CreatedUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedUserID) {
				local.R.CreatedUserUserSignupRequests = append(local.R.CreatedUserUserSignupRequests, foreign)
				if foreign.R == nil {
					foreign.R = &userSignupRequestR{}
				}
				foreign.R.CreatedUser = local
				break
			}
		}
	}

	return nil
}

// AddCreatedUserUserInvitationsP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedUserUserInvitations.
// Sets related.R.CreatedUser appropriately.
// Panics on error.
func (o *User) AddCreatedUserUserInvitationsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserInvitation) {
	if err := o.AddCreatedUserUserInvitations(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCreatedUserUserInvitations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedUserUserInvitations.
// Sets related.R.CreatedUser appropriately.
func (o *User) AddCreatedUserUserInvitations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserInvitation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedUserID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_invitations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userInvitationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedUserID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedUserUserInvitations: related,
		}
	} else {
		o.R.CreatedUserUserInvitations = append(o.R.CreatedUserUserInvitations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userInvitationR{
				CreatedUser: o,
			}
		} else {
			rel.R.CreatedUser = o
		}
	}
	return nil
}

// SetCreatedUserUserInvitationsP removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedUser's CreatedUserUserInvitations accordingly.
// Replaces o.R.CreatedUserUserInvitations with related.
// Sets related.R.CreatedUser's CreatedUserUserInvitations accordingly.
// Panics on error.
func (o *User) SetCreatedUserUserInvitationsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserInvitation) {
	if err := o.SetCreatedUserUserInvitations(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCreatedUserUserInvitations removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedUser's CreatedUserUserInvitations accordingly.
// Replaces o.R.CreatedUserUserInvitations with related.
// Sets related.R.CreatedUser's CreatedUserUserInvitations accordingly.
func (o *User) SetCreatedUserUserInvitations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserInvitation) error {
	query := "update \"user_invitations\" set \"created_user_id\" = null where \"created_user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedUserUserInvitations {
			queries.SetScanner(&rel.CreatedUserID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedUser = nil
		}
		o.R.CreatedUserUserInvitations = nil
	}

	return o.AddCreatedUserUserInvitations(ctx, exec, insert, related...)
}

// RemoveCreatedUserUserInvitationsP relationships from objects passed in.
// Removes related items from R.CreatedUserUserInvitations (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedUser.
// Panics on error.
func (o *User) RemoveCreatedUserUserInvitationsP(ctx context.Context, exec boil.ContextExecutor, related ...*UserInvitation) {
	if err := o.RemoveCreatedUserUserInvitations(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCreatedUserUserInvitations relationships from objects passed in.
// Removes related items from R.CreatedUserUserInvitations (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedUser.
func (o *User) RemoveCreatedUserUserInvitations(ctx context.Context, exec boil.ContextExecutor, related ...*UserInvitation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedUserID, nil)
		if rel.R != nil {
			rel.R.CreatedUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_user_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedUserUserInvitations {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedUserUserInvitations)
			if ln > 1 && i < ln-1 {
				o.R.CreatedUserUserInvitations[i] = o.R.CreatedUserUserInvitations[ln-1]
			}
			o.R.CreatedUserUserInvitations = o.R.CreatedUserUserInvitations[:ln-1]
			break
		}
	}

	return nil
}

// AddUserInvitationsP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UserInvitations.
// Sets related.R.User appropriately.
// Panics on error.
func (o *User) AddUserInvitationsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserInvitation) {
	if err := o.AddUserInvitations(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserInvitations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UserInvitations.
// Sets related.R.User appropriately.
func (o *User) AddUserInvitations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserInvitation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_invitations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userInvitationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UserInvitations: related,
		}
	} else {
		o.R.UserInvitations = append(o.R.UserInvitations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userInvitationR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddCreatedUserUserSignupRequestsP adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedUserUserSignupRequests.
// Sets related.R.CreatedUser appropriately.
// Panics on error.
func (o *User) AddCreatedUserUserSignupRequestsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserSignupRequest) {
	if err := o.AddCreatedUserUserSignupRequests(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCreatedUserUserSignupRequests adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedUserUserSignupRequests.
// Sets related.R.CreatedUser appropriately.
func (o *User) AddCreatedUserUserSignupRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserSignupRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedUserID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_signup_requests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userSignupRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedUserID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedUserUserSignupRequests: related,
		}
	} else {
		o.R.CreatedUserUserSignupRequests = append(o.R.CreatedUserUserSignupRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userSignupRequestR{
				CreatedUser: o,
			}
		} else {
			rel.R.CreatedUser = o
		}
	}
	return nil
}

// SetCreatedUserUserSignupRequestsP removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedUser's CreatedUserUserSignupRequests accordingly.
// Replaces o.R.CreatedUserUserSignupRequests with related.
// Sets related.R.CreatedUser's CreatedUserUserSignupRequests accordingly.
// Panics on error.
func (o *User) SetCreatedUserUserSignupRequestsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserSignupRequest) {
	if err := o.SetCreatedUserUserSignupRequests(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCreatedUserUserSignupRequests removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedUser's CreatedUserUserSignupRequests accordingly.
// Replaces o.R.CreatedUserUserSignupRequests with related.
// Sets related.R.CreatedUser's CreatedUserUserSignupRequests accordingly.
func (o *User) SetCreatedUserUserSignupRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserSignupRequest) error {
	query := "update \"user_signup_requests\" set \"created_user_id\" = null where \"created_user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedUserUserSignupRequests {
			queries.SetScanner(&rel.CreatedUserID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedUser = nil
		}
		o.R.CreatedUserUserSignupRequests = nil
	}

	return o.AddCreatedUserUserSignupRequests(ctx, exec, insert, related...)
}

// RemoveCreatedUserUserSignupRequestsP relationships from objects passed in.
// Removes related items from R.CreatedUserUserSignupRequests (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedUser.
// Panics on error.
func (o *User) RemoveCreatedUserUserSignupRequestsP(ctx context.Context, exec boil.ContextExecutor, related ...*UserSignupRequest) {
	if err := o.RemoveCreatedUserUserSignupRequests(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCreatedUserUserSignupRequests relationships from objects passed in.
// Removes related items from R.CreatedUserUserSignupRequests (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedUser.
func (o *User) RemoveCreatedUserUserSignupRequests(ctx context.Context, exec boil.ContextExecutor, related ...*UserSignupRequest) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedUserID, nil)
		if rel.R != nil {
			rel.R.CreatedUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_user_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedUserUserSignupRequests {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedUserUserSignupRequests)
			if ln > 1 && i < ln-1 {
				o.R.CreatedUserUserSignupRequests[i] = o.R.CreatedUserUserSignupRequests[ln-1]
			}
			o.R.CreatedUserUserSignupRequests = o.R.CreatedUserUserSignupRequests[:ln-1]
			break
		}
	}

	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("\"users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users\".*"})
	}

	return userQuery{q}
}

// FindUserP retrieves a single record by ID with an executor, and panics on error.
func FindUserP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *User {
	retobj, err := FindUser(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from users")
	}

	return userObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *User) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *User) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into users")
	}

	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the User, and panics on error.
// See Update for more documentation.
func (o *User) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *User) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for users")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for users")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all user")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *User) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *User) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert users, could not build update column list")
		}

		ret := strmangle.SetComplement(userAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert users, could not build conflict column list")
			}

			conflict = make([]string, len(userPrimaryKeyColumns))
			copy(conflict, userPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert users")
	}

	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single User record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *User) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no User provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM \"users\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for users")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *User) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users\".* FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExistsP checks if the User row exists. Panics on error.
func UserExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := UserExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserExists checks if the User row exists.
func UserExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if users exists")
	}

	return exists, nil
}

// Exists checks if the User row exists.
func (o *User) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserExists(ctx, exec, o.ID)
}
