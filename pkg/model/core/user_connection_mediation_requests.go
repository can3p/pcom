// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserConnectionMediationRequest is an object representing the database table.
type UserConnectionMediationRequest struct {
	ID              string                        `boil:"id" json:"id" toml:"id" yaml:"id"`
	WhoUserID       string                        `boil:"who_user_id" json:"who_user_id" toml:"who_user_id" yaml:"who_user_id"`
	TargetUserID    string                        `boil:"target_user_id" json:"target_user_id" toml:"target_user_id" yaml:"target_user_id"`
	TargetDecision  NullConnectionRequestDecision `boil:"target_decision" json:"target_decision,omitempty" toml:"target_decision" yaml:"target_decision,omitempty"`
	TargetDecidedAt null.Time                     `boil:"target_decided_at" json:"target_decided_at,omitempty" toml:"target_decided_at" yaml:"target_decided_at,omitempty"`
	TargetNote      null.String                   `boil:"target_note" json:"target_note,omitempty" toml:"target_note" yaml:"target_note,omitempty"`
	ConnectionID    null.String                   `boil:"connection_id" json:"connection_id,omitempty" toml:"connection_id" yaml:"connection_id,omitempty"`
	CreatedAt       time.Time                     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time                     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userConnectionMediationRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userConnectionMediationRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserConnectionMediationRequestColumns = struct {
	ID              string
	WhoUserID       string
	TargetUserID    string
	TargetDecision  string
	TargetDecidedAt string
	TargetNote      string
	ConnectionID    string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	WhoUserID:       "who_user_id",
	TargetUserID:    "target_user_id",
	TargetDecision:  "target_decision",
	TargetDecidedAt: "target_decided_at",
	TargetNote:      "target_note",
	ConnectionID:    "connection_id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

var UserConnectionMediationRequestTableColumns = struct {
	ID              string
	WhoUserID       string
	TargetUserID    string
	TargetDecision  string
	TargetDecidedAt string
	TargetNote      string
	ConnectionID    string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "user_connection_mediation_requests.id",
	WhoUserID:       "user_connection_mediation_requests.who_user_id",
	TargetUserID:    "user_connection_mediation_requests.target_user_id",
	TargetDecision:  "user_connection_mediation_requests.target_decision",
	TargetDecidedAt: "user_connection_mediation_requests.target_decided_at",
	TargetNote:      "user_connection_mediation_requests.target_note",
	ConnectionID:    "user_connection_mediation_requests.connection_id",
	CreatedAt:       "user_connection_mediation_requests.created_at",
	UpdatedAt:       "user_connection_mediation_requests.updated_at",
}

// Generated where

type whereHelperNullConnectionRequestDecision struct{ field string }

func (w whereHelperNullConnectionRequestDecision) EQ(x NullConnectionRequestDecision) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullConnectionRequestDecision) NEQ(x NullConnectionRequestDecision) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullConnectionRequestDecision) LT(x NullConnectionRequestDecision) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullConnectionRequestDecision) LTE(x NullConnectionRequestDecision) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullConnectionRequestDecision) GT(x NullConnectionRequestDecision) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullConnectionRequestDecision) GTE(x NullConnectionRequestDecision) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullConnectionRequestDecision) IN(slice []NullConnectionRequestDecision) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullConnectionRequestDecision) NIN(slice []NullConnectionRequestDecision) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullConnectionRequestDecision) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelperNullConnectionRequestDecision) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var UserConnectionMediationRequestWhere = struct {
	ID              whereHelperstring
	WhoUserID       whereHelperstring
	TargetUserID    whereHelperstring
	TargetDecision  whereHelperNullConnectionRequestDecision
	TargetDecidedAt whereHelpernull_Time
	TargetNote      whereHelpernull_String
	ConnectionID    whereHelpernull_String
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	ID:              whereHelperstring{field: "\"user_connection_mediation_requests\".\"id\""},
	WhoUserID:       whereHelperstring{field: "\"user_connection_mediation_requests\".\"who_user_id\""},
	TargetUserID:    whereHelperstring{field: "\"user_connection_mediation_requests\".\"target_user_id\""},
	TargetDecision:  whereHelperNullConnectionRequestDecision{field: "\"user_connection_mediation_requests\".\"target_decision\""},
	TargetDecidedAt: whereHelpernull_Time{field: "\"user_connection_mediation_requests\".\"target_decided_at\""},
	TargetNote:      whereHelpernull_String{field: "\"user_connection_mediation_requests\".\"target_note\""},
	ConnectionID:    whereHelpernull_String{field: "\"user_connection_mediation_requests\".\"connection_id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"user_connection_mediation_requests\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"user_connection_mediation_requests\".\"updated_at\""},
}

// UserConnectionMediationRequestRels is where relationship names are stored.
var UserConnectionMediationRequestRels = struct {
	Connection                       string
	TargetUser                       string
	WhoUser                          string
	MediationUserConnectionMediators string
}{
	Connection:                       "Connection",
	TargetUser:                       "TargetUser",
	WhoUser:                          "WhoUser",
	MediationUserConnectionMediators: "MediationUserConnectionMediators",
}

// userConnectionMediationRequestR is where relationships are stored.
type userConnectionMediationRequestR struct {
	Connection                       *UserConnection             `boil:"Connection" json:"Connection" toml:"Connection" yaml:"Connection"`
	TargetUser                       *User                       `boil:"TargetUser" json:"TargetUser" toml:"TargetUser" yaml:"TargetUser"`
	WhoUser                          *User                       `boil:"WhoUser" json:"WhoUser" toml:"WhoUser" yaml:"WhoUser"`
	MediationUserConnectionMediators UserConnectionMediatorSlice `boil:"MediationUserConnectionMediators" json:"MediationUserConnectionMediators" toml:"MediationUserConnectionMediators" yaml:"MediationUserConnectionMediators"`
}

// NewStruct creates a new relationship struct
func (*userConnectionMediationRequestR) NewStruct() *userConnectionMediationRequestR {
	return &userConnectionMediationRequestR{}
}

func (r *userConnectionMediationRequestR) GetConnection() *UserConnection {
	if r == nil {
		return nil
	}
	return r.Connection
}

func (r *userConnectionMediationRequestR) GetTargetUser() *User {
	if r == nil {
		return nil
	}
	return r.TargetUser
}

func (r *userConnectionMediationRequestR) GetWhoUser() *User {
	if r == nil {
		return nil
	}
	return r.WhoUser
}

func (r *userConnectionMediationRequestR) GetMediationUserConnectionMediators() UserConnectionMediatorSlice {
	if r == nil {
		return nil
	}
	return r.MediationUserConnectionMediators
}

// userConnectionMediationRequestL is where Load methods for each relationship are stored.
type userConnectionMediationRequestL struct{}

var (
	userConnectionMediationRequestAllColumns            = []string{"id", "who_user_id", "target_user_id", "target_decision", "target_decided_at", "target_note", "connection_id", "created_at", "updated_at"}
	userConnectionMediationRequestColumnsWithoutDefault = []string{"id", "who_user_id", "target_user_id", "created_at", "updated_at"}
	userConnectionMediationRequestColumnsWithDefault    = []string{"target_decision", "target_decided_at", "target_note", "connection_id"}
	userConnectionMediationRequestPrimaryKeyColumns     = []string{"id"}
	userConnectionMediationRequestGeneratedColumns      = []string{}
)

type (
	// UserConnectionMediationRequestSlice is an alias for a slice of pointers to UserConnectionMediationRequest.
	// This should almost always be used instead of []UserConnectionMediationRequest.
	UserConnectionMediationRequestSlice []*UserConnectionMediationRequest

	userConnectionMediationRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userConnectionMediationRequestType                 = reflect.TypeOf(&UserConnectionMediationRequest{})
	userConnectionMediationRequestMapping              = queries.MakeStructMapping(userConnectionMediationRequestType)
	userConnectionMediationRequestPrimaryKeyMapping, _ = queries.BindMapping(userConnectionMediationRequestType, userConnectionMediationRequestMapping, userConnectionMediationRequestPrimaryKeyColumns)
	userConnectionMediationRequestInsertCacheMut       sync.RWMutex
	userConnectionMediationRequestInsertCache          = make(map[string]insertCache)
	userConnectionMediationRequestUpdateCacheMut       sync.RWMutex
	userConnectionMediationRequestUpdateCache          = make(map[string]updateCache)
	userConnectionMediationRequestUpsertCacheMut       sync.RWMutex
	userConnectionMediationRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single userConnectionMediationRequest record from the query, and panics on error.
func (q userConnectionMediationRequestQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *UserConnectionMediationRequest {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userConnectionMediationRequest record from the query.
func (q userConnectionMediationRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserConnectionMediationRequest, error) {
	o := &UserConnectionMediationRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for user_connection_mediation_requests")
	}

	return o, nil
}

// AllP returns all UserConnectionMediationRequest records from the query, and panics on error.
func (q userConnectionMediationRequestQuery) AllP(ctx context.Context, exec boil.ContextExecutor) UserConnectionMediationRequestSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserConnectionMediationRequest records from the query.
func (q userConnectionMediationRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserConnectionMediationRequestSlice, error) {
	var o []*UserConnectionMediationRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to UserConnectionMediationRequest slice")
	}

	return o, nil
}

// CountP returns the count of all UserConnectionMediationRequest records in the query, and panics on error.
func (q userConnectionMediationRequestQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserConnectionMediationRequest records in the query.
func (q userConnectionMediationRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count user_connection_mediation_requests rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userConnectionMediationRequestQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userConnectionMediationRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if user_connection_mediation_requests exists")
	}

	return count > 0, nil
}

// Connection pointed to by the foreign key.
func (o *UserConnectionMediationRequest) Connection(mods ...qm.QueryMod) userConnectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ConnectionID),
	}

	queryMods = append(queryMods, mods...)

	return UserConnections(queryMods...)
}

// TargetUser pointed to by the foreign key.
func (o *UserConnectionMediationRequest) TargetUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TargetUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// WhoUser pointed to by the foreign key.
func (o *UserConnectionMediationRequest) WhoUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WhoUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// MediationUserConnectionMediators retrieves all the user_connection_mediator's UserConnectionMediators with an executor via mediation_id column.
func (o *UserConnectionMediationRequest) MediationUserConnectionMediators(mods ...qm.QueryMod) userConnectionMediatorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_connection_mediators\".\"mediation_id\"=?", o.ID),
	)

	return UserConnectionMediators(queryMods...)
}

// LoadConnection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userConnectionMediationRequestL) LoadConnection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserConnectionMediationRequest interface{}, mods queries.Applicator) error {
	var slice []*UserConnectionMediationRequest
	var object *UserConnectionMediationRequest

	if singular {
		var ok bool
		object, ok = maybeUserConnectionMediationRequest.(*UserConnectionMediationRequest)
		if !ok {
			object = new(UserConnectionMediationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserConnectionMediationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserConnectionMediationRequest))
			}
		}
	} else {
		s, ok := maybeUserConnectionMediationRequest.(*[]*UserConnectionMediationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserConnectionMediationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserConnectionMediationRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userConnectionMediationRequestR{}
		}
		if !queries.IsNil(object.ConnectionID) {
			args[object.ConnectionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userConnectionMediationRequestR{}
			}

			if !queries.IsNil(obj.ConnectionID) {
				args[obj.ConnectionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_connections`),
		qm.WhereIn(`user_connections.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserConnection")
	}

	var resultSlice []*UserConnection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserConnection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_connections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_connections")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Connection = foreign
		if foreign.R == nil {
			foreign.R = &userConnectionR{}
		}
		foreign.R.ConnectionUserConnectionMediationRequest = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ConnectionID, foreign.ID) {
				local.R.Connection = foreign
				if foreign.R == nil {
					foreign.R = &userConnectionR{}
				}
				foreign.R.ConnectionUserConnectionMediationRequest = local
				break
			}
		}
	}

	return nil
}

// LoadTargetUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userConnectionMediationRequestL) LoadTargetUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserConnectionMediationRequest interface{}, mods queries.Applicator) error {
	var slice []*UserConnectionMediationRequest
	var object *UserConnectionMediationRequest

	if singular {
		var ok bool
		object, ok = maybeUserConnectionMediationRequest.(*UserConnectionMediationRequest)
		if !ok {
			object = new(UserConnectionMediationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserConnectionMediationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserConnectionMediationRequest))
			}
		}
	} else {
		s, ok := maybeUserConnectionMediationRequest.(*[]*UserConnectionMediationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserConnectionMediationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserConnectionMediationRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userConnectionMediationRequestR{}
		}
		args[object.TargetUserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userConnectionMediationRequestR{}
			}

			args[obj.TargetUserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TargetUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.TargetUserUserConnectionMediationRequests = append(foreign.R.TargetUserUserConnectionMediationRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TargetUserID == foreign.ID {
				local.R.TargetUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.TargetUserUserConnectionMediationRequests = append(foreign.R.TargetUserUserConnectionMediationRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadWhoUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userConnectionMediationRequestL) LoadWhoUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserConnectionMediationRequest interface{}, mods queries.Applicator) error {
	var slice []*UserConnectionMediationRequest
	var object *UserConnectionMediationRequest

	if singular {
		var ok bool
		object, ok = maybeUserConnectionMediationRequest.(*UserConnectionMediationRequest)
		if !ok {
			object = new(UserConnectionMediationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserConnectionMediationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserConnectionMediationRequest))
			}
		}
	} else {
		s, ok := maybeUserConnectionMediationRequest.(*[]*UserConnectionMediationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserConnectionMediationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserConnectionMediationRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userConnectionMediationRequestR{}
		}
		args[object.WhoUserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userConnectionMediationRequestR{}
			}

			args[obj.WhoUserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WhoUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.WhoUserUserConnectionMediationRequests = append(foreign.R.WhoUserUserConnectionMediationRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WhoUserID == foreign.ID {
				local.R.WhoUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.WhoUserUserConnectionMediationRequests = append(foreign.R.WhoUserUserConnectionMediationRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadMediationUserConnectionMediators allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userConnectionMediationRequestL) LoadMediationUserConnectionMediators(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserConnectionMediationRequest interface{}, mods queries.Applicator) error {
	var slice []*UserConnectionMediationRequest
	var object *UserConnectionMediationRequest

	if singular {
		var ok bool
		object, ok = maybeUserConnectionMediationRequest.(*UserConnectionMediationRequest)
		if !ok {
			object = new(UserConnectionMediationRequest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserConnectionMediationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserConnectionMediationRequest))
			}
		}
	} else {
		s, ok := maybeUserConnectionMediationRequest.(*[]*UserConnectionMediationRequest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserConnectionMediationRequest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserConnectionMediationRequest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userConnectionMediationRequestR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userConnectionMediationRequestR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_connection_mediators`),
		qm.WhereIn(`user_connection_mediators.mediation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_connection_mediators")
	}

	var resultSlice []*UserConnectionMediator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_connection_mediators")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_connection_mediators")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_connection_mediators")
	}

	if singular {
		object.R.MediationUserConnectionMediators = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userConnectionMediatorR{}
			}
			foreign.R.Mediation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MediationID {
				local.R.MediationUserConnectionMediators = append(local.R.MediationUserConnectionMediators, foreign)
				if foreign.R == nil {
					foreign.R = &userConnectionMediatorR{}
				}
				foreign.R.Mediation = local
				break
			}
		}
	}

	return nil
}

// SetConnectionP of the userConnectionMediationRequest to the related item.
// Sets o.R.Connection to related.
// Adds o to related.R.ConnectionUserConnectionMediationRequest.
// Panics on error.
func (o *UserConnectionMediationRequest) SetConnectionP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserConnection) {
	if err := o.SetConnection(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetConnection of the userConnectionMediationRequest to the related item.
// Sets o.R.Connection to related.
// Adds o to related.R.ConnectionUserConnectionMediationRequest.
func (o *UserConnectionMediationRequest) SetConnection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserConnection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_connection_mediation_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"connection_id"}),
		strmangle.WhereClause("\"", "\"", 2, userConnectionMediationRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ConnectionID, related.ID)
	if o.R == nil {
		o.R = &userConnectionMediationRequestR{
			Connection: related,
		}
	} else {
		o.R.Connection = related
	}

	if related.R == nil {
		related.R = &userConnectionR{
			ConnectionUserConnectionMediationRequest: o,
		}
	} else {
		related.R.ConnectionUserConnectionMediationRequest = o
	}

	return nil
}

// RemoveConnectionP relationship.
// Sets o.R.Connection to nil.
// Removes o from all passed in related items' relationships struct.
// Panics on error.
func (o *UserConnectionMediationRequest) RemoveConnectionP(ctx context.Context, exec boil.ContextExecutor, related *UserConnection) {
	if err := o.RemoveConnection(ctx, exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveConnection relationship.
// Sets o.R.Connection to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserConnectionMediationRequest) RemoveConnection(ctx context.Context, exec boil.ContextExecutor, related *UserConnection) error {
	var err error

	queries.SetScanner(&o.ConnectionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("connection_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Connection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.ConnectionUserConnectionMediationRequest = nil
	return nil
}

// SetTargetUserP of the userConnectionMediationRequest to the related item.
// Sets o.R.TargetUser to related.
// Adds o to related.R.TargetUserUserConnectionMediationRequests.
// Panics on error.
func (o *UserConnectionMediationRequest) SetTargetUserP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetTargetUser(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTargetUser of the userConnectionMediationRequest to the related item.
// Sets o.R.TargetUser to related.
// Adds o to related.R.TargetUserUserConnectionMediationRequests.
func (o *UserConnectionMediationRequest) SetTargetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_connection_mediation_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"target_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userConnectionMediationRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TargetUserID = related.ID
	if o.R == nil {
		o.R = &userConnectionMediationRequestR{
			TargetUser: related,
		}
	} else {
		o.R.TargetUser = related
	}

	if related.R == nil {
		related.R = &userR{
			TargetUserUserConnectionMediationRequests: UserConnectionMediationRequestSlice{o},
		}
	} else {
		related.R.TargetUserUserConnectionMediationRequests = append(related.R.TargetUserUserConnectionMediationRequests, o)
	}

	return nil
}

// SetWhoUserP of the userConnectionMediationRequest to the related item.
// Sets o.R.WhoUser to related.
// Adds o to related.R.WhoUserUserConnectionMediationRequests.
// Panics on error.
func (o *UserConnectionMediationRequest) SetWhoUserP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetWhoUser(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetWhoUser of the userConnectionMediationRequest to the related item.
// Sets o.R.WhoUser to related.
// Adds o to related.R.WhoUserUserConnectionMediationRequests.
func (o *UserConnectionMediationRequest) SetWhoUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_connection_mediation_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"who_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userConnectionMediationRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WhoUserID = related.ID
	if o.R == nil {
		o.R = &userConnectionMediationRequestR{
			WhoUser: related,
		}
	} else {
		o.R.WhoUser = related
	}

	if related.R == nil {
		related.R = &userR{
			WhoUserUserConnectionMediationRequests: UserConnectionMediationRequestSlice{o},
		}
	} else {
		related.R.WhoUserUserConnectionMediationRequests = append(related.R.WhoUserUserConnectionMediationRequests, o)
	}

	return nil
}

// AddMediationUserConnectionMediatorsP adds the given related objects to the existing relationships
// of the user_connection_mediation_request, optionally inserting them as new records.
// Appends related to o.R.MediationUserConnectionMediators.
// Sets related.R.Mediation appropriately.
// Panics on error.
func (o *UserConnectionMediationRequest) AddMediationUserConnectionMediatorsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserConnectionMediator) {
	if err := o.AddMediationUserConnectionMediators(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMediationUserConnectionMediators adds the given related objects to the existing relationships
// of the user_connection_mediation_request, optionally inserting them as new records.
// Appends related to o.R.MediationUserConnectionMediators.
// Sets related.R.Mediation appropriately.
func (o *UserConnectionMediationRequest) AddMediationUserConnectionMediators(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserConnectionMediator) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MediationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_connection_mediators\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mediation_id"}),
				strmangle.WhereClause("\"", "\"", 2, userConnectionMediatorPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MediationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userConnectionMediationRequestR{
			MediationUserConnectionMediators: related,
		}
	} else {
		o.R.MediationUserConnectionMediators = append(o.R.MediationUserConnectionMediators, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userConnectionMediatorR{
				Mediation: o,
			}
		} else {
			rel.R.Mediation = o
		}
	}
	return nil
}

// UserConnectionMediationRequests retrieves all the records using an executor.
func UserConnectionMediationRequests(mods ...qm.QueryMod) userConnectionMediationRequestQuery {
	mods = append(mods, qm.From("\"user_connection_mediation_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_connection_mediation_requests\".*"})
	}

	return userConnectionMediationRequestQuery{q}
}

// FindUserConnectionMediationRequestP retrieves a single record by ID with an executor, and panics on error.
func FindUserConnectionMediationRequestP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *UserConnectionMediationRequest {
	retobj, err := FindUserConnectionMediationRequest(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserConnectionMediationRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserConnectionMediationRequest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserConnectionMediationRequest, error) {
	userConnectionMediationRequestObj := &UserConnectionMediationRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_connection_mediation_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userConnectionMediationRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from user_connection_mediation_requests")
	}

	return userConnectionMediationRequestObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserConnectionMediationRequest) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserConnectionMediationRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no user_connection_mediation_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userConnectionMediationRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userConnectionMediationRequestInsertCacheMut.RLock()
	cache, cached := userConnectionMediationRequestInsertCache[key]
	userConnectionMediationRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userConnectionMediationRequestAllColumns,
			userConnectionMediationRequestColumnsWithDefault,
			userConnectionMediationRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userConnectionMediationRequestType, userConnectionMediationRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userConnectionMediationRequestType, userConnectionMediationRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_connection_mediation_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_connection_mediation_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into user_connection_mediation_requests")
	}

	if !cached {
		userConnectionMediationRequestInsertCacheMut.Lock()
		userConnectionMediationRequestInsertCache[key] = cache
		userConnectionMediationRequestInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the UserConnectionMediationRequest, and panics on error.
// See Update for more documentation.
func (o *UserConnectionMediationRequest) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the UserConnectionMediationRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserConnectionMediationRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	userConnectionMediationRequestUpdateCacheMut.RLock()
	cache, cached := userConnectionMediationRequestUpdateCache[key]
	userConnectionMediationRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userConnectionMediationRequestAllColumns,
			userConnectionMediationRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update user_connection_mediation_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_connection_mediation_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userConnectionMediationRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userConnectionMediationRequestType, userConnectionMediationRequestMapping, append(wl, userConnectionMediationRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update user_connection_mediation_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for user_connection_mediation_requests")
	}

	if !cached {
		userConnectionMediationRequestUpdateCacheMut.Lock()
		userConnectionMediationRequestUpdateCache[key] = cache
		userConnectionMediationRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userConnectionMediationRequestQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userConnectionMediationRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for user_connection_mediation_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for user_connection_mediation_requests")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserConnectionMediationRequestSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserConnectionMediationRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userConnectionMediationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_connection_mediation_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userConnectionMediationRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in userConnectionMediationRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all userConnectionMediationRequest")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserConnectionMediationRequest) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserConnectionMediationRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no user_connection_mediation_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(userConnectionMediationRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userConnectionMediationRequestUpsertCacheMut.RLock()
	cache, cached := userConnectionMediationRequestUpsertCache[key]
	userConnectionMediationRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userConnectionMediationRequestAllColumns,
			userConnectionMediationRequestColumnsWithDefault,
			userConnectionMediationRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userConnectionMediationRequestAllColumns,
			userConnectionMediationRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert user_connection_mediation_requests, could not build update column list")
		}

		ret := strmangle.SetComplement(userConnectionMediationRequestAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userConnectionMediationRequestPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert user_connection_mediation_requests, could not build conflict column list")
			}

			conflict = make([]string, len(userConnectionMediationRequestPrimaryKeyColumns))
			copy(conflict, userConnectionMediationRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_connection_mediation_requests\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userConnectionMediationRequestType, userConnectionMediationRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userConnectionMediationRequestType, userConnectionMediationRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert user_connection_mediation_requests")
	}

	if !cached {
		userConnectionMediationRequestUpsertCacheMut.Lock()
		userConnectionMediationRequestUpsertCache[key] = cache
		userConnectionMediationRequestUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single UserConnectionMediationRequest record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserConnectionMediationRequest) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single UserConnectionMediationRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserConnectionMediationRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no UserConnectionMediationRequest provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userConnectionMediationRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"user_connection_mediation_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from user_connection_mediation_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for user_connection_mediation_requests")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userConnectionMediationRequestQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userConnectionMediationRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no userConnectionMediationRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from user_connection_mediation_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for user_connection_mediation_requests")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserConnectionMediationRequestSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserConnectionMediationRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userConnectionMediationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_connection_mediation_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userConnectionMediationRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from userConnectionMediationRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for user_connection_mediation_requests")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserConnectionMediationRequest) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserConnectionMediationRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserConnectionMediationRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserConnectionMediationRequestSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserConnectionMediationRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserConnectionMediationRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userConnectionMediationRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_connection_mediation_requests\".* FROM \"user_connection_mediation_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userConnectionMediationRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in UserConnectionMediationRequestSlice")
	}

	*o = slice

	return nil
}

// UserConnectionMediationRequestExistsP checks if the UserConnectionMediationRequest row exists. Panics on error.
func UserConnectionMediationRequestExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := UserConnectionMediationRequestExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserConnectionMediationRequestExists checks if the UserConnectionMediationRequest row exists.
func UserConnectionMediationRequestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_connection_mediation_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if user_connection_mediation_requests exists")
	}

	return exists, nil
}

// Exists checks if the UserConnectionMediationRequest row exists.
func (o *UserConnectionMediationRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserConnectionMediationRequestExists(ctx, exec, o.ID)
}
