// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RSSItem is an object representing the database table.
type RSSItem struct {
	ID                   string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	FeedID               string    `boil:"feed_id" json:"feed_id" toml:"feed_id" yaml:"feed_id"`
	URLID                string    `boil:"url_id" json:"url_id" toml:"url_id" yaml:"url_id"`
	GUID                 string    `boil:"guid" json:"guid" toml:"guid" yaml:"guid"`
	Title                string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description          string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	SanitizedDescription string    `boil:"sanitized_description" json:"sanitized_description" toml:"sanitized_description" yaml:"sanitized_description"`
	PublishedAt          time.Time `boil:"published_at" json:"published_at" toml:"published_at" yaml:"published_at"`
	CreatedAt            time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *rssItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rssItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RSSItemColumns = struct {
	ID                   string
	FeedID               string
	URLID                string
	GUID                 string
	Title                string
	Description          string
	SanitizedDescription string
	PublishedAt          string
	CreatedAt            string
	UpdatedAt            string
}{
	ID:                   "id",
	FeedID:               "feed_id",
	URLID:                "url_id",
	GUID:                 "guid",
	Title:                "title",
	Description:          "description",
	SanitizedDescription: "sanitized_description",
	PublishedAt:          "published_at",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
}

var RSSItemTableColumns = struct {
	ID                   string
	FeedID               string
	URLID                string
	GUID                 string
	Title                string
	Description          string
	SanitizedDescription string
	PublishedAt          string
	CreatedAt            string
	UpdatedAt            string
}{
	ID:                   "rss_items.id",
	FeedID:               "rss_items.feed_id",
	URLID:                "rss_items.url_id",
	GUID:                 "rss_items.guid",
	Title:                "rss_items.title",
	Description:          "rss_items.description",
	SanitizedDescription: "rss_items.sanitized_description",
	PublishedAt:          "rss_items.published_at",
	CreatedAt:            "rss_items.created_at",
	UpdatedAt:            "rss_items.updated_at",
}

// Generated where

var RSSItemWhere = struct {
	ID                   whereHelperstring
	FeedID               whereHelperstring
	URLID                whereHelperstring
	GUID                 whereHelperstring
	Title                whereHelperstring
	Description          whereHelperstring
	SanitizedDescription whereHelperstring
	PublishedAt          whereHelpertime_Time
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
}{
	ID:                   whereHelperstring{field: "\"rss_items\".\"id\""},
	FeedID:               whereHelperstring{field: "\"rss_items\".\"feed_id\""},
	URLID:                whereHelperstring{field: "\"rss_items\".\"url_id\""},
	GUID:                 whereHelperstring{field: "\"rss_items\".\"guid\""},
	Title:                whereHelperstring{field: "\"rss_items\".\"title\""},
	Description:          whereHelperstring{field: "\"rss_items\".\"description\""},
	SanitizedDescription: whereHelperstring{field: "\"rss_items\".\"sanitized_description\""},
	PublishedAt:          whereHelpertime_Time{field: "\"rss_items\".\"published_at\""},
	CreatedAt:            whereHelpertime_Time{field: "\"rss_items\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"rss_items\".\"updated_at\""},
}

// RSSItemRels is where relationship names are stored.
var RSSItemRels = struct {
	Feed          string
	URL           string
	Posts         string
	UserFeedItems string
}{
	Feed:          "Feed",
	URL:           "URL",
	Posts:         "Posts",
	UserFeedItems: "UserFeedItems",
}

// rssItemR is where relationships are stored.
type rssItemR struct {
	Feed          *RSSFeed          `boil:"Feed" json:"Feed" toml:"Feed" yaml:"Feed"`
	URL           *NormalizedURL    `boil:"URL" json:"URL" toml:"URL" yaml:"URL"`
	Posts         PostSlice         `boil:"Posts" json:"Posts" toml:"Posts" yaml:"Posts"`
	UserFeedItems UserFeedItemSlice `boil:"UserFeedItems" json:"UserFeedItems" toml:"UserFeedItems" yaml:"UserFeedItems"`
}

// NewStruct creates a new relationship struct
func (*rssItemR) NewStruct() *rssItemR {
	return &rssItemR{}
}

func (r *rssItemR) GetFeed() *RSSFeed {
	if r == nil {
		return nil
	}
	return r.Feed
}

func (r *rssItemR) GetURL() *NormalizedURL {
	if r == nil {
		return nil
	}
	return r.URL
}

func (r *rssItemR) GetPosts() PostSlice {
	if r == nil {
		return nil
	}
	return r.Posts
}

func (r *rssItemR) GetUserFeedItems() UserFeedItemSlice {
	if r == nil {
		return nil
	}
	return r.UserFeedItems
}

// rssItemL is where Load methods for each relationship are stored.
type rssItemL struct{}

var (
	rssItemAllColumns            = []string{"id", "feed_id", "url_id", "guid", "title", "description", "sanitized_description", "published_at", "created_at", "updated_at"}
	rssItemColumnsWithoutDefault = []string{"id", "feed_id", "url_id", "guid", "title", "description", "sanitized_description", "published_at", "created_at", "updated_at"}
	rssItemColumnsWithDefault    = []string{}
	rssItemPrimaryKeyColumns     = []string{"id"}
	rssItemGeneratedColumns      = []string{}
)

type (
	// RSSItemSlice is an alias for a slice of pointers to RSSItem.
	// This should almost always be used instead of []RSSItem.
	RSSItemSlice []*RSSItem

	rssItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rssItemType                 = reflect.TypeOf(&RSSItem{})
	rssItemMapping              = queries.MakeStructMapping(rssItemType)
	rssItemPrimaryKeyMapping, _ = queries.BindMapping(rssItemType, rssItemMapping, rssItemPrimaryKeyColumns)
	rssItemInsertCacheMut       sync.RWMutex
	rssItemInsertCache          = make(map[string]insertCache)
	rssItemUpdateCacheMut       sync.RWMutex
	rssItemUpdateCache          = make(map[string]updateCache)
	rssItemUpsertCacheMut       sync.RWMutex
	rssItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single rssItem record from the query, and panics on error.
func (q rssItemQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *RSSItem {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single rssItem record from the query.
func (q rssItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RSSItem, error) {
	o := &RSSItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for rss_items")
	}

	return o, nil
}

// AllP returns all RSSItem records from the query, and panics on error.
func (q rssItemQuery) AllP(ctx context.Context, exec boil.ContextExecutor) RSSItemSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all RSSItem records from the query.
func (q rssItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (RSSItemSlice, error) {
	var o []*RSSItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to RSSItem slice")
	}

	return o, nil
}

// CountP returns the count of all RSSItem records in the query, and panics on error.
func (q rssItemQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all RSSItem records in the query.
func (q rssItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count rss_items rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q rssItemQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q rssItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if rss_items exists")
	}

	return count > 0, nil
}

// Feed pointed to by the foreign key.
func (o *RSSItem) Feed(mods ...qm.QueryMod) rssFeedQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FeedID),
	}

	queryMods = append(queryMods, mods...)

	return RSSFeeds(queryMods...)
}

// URL pointed to by the foreign key.
func (o *RSSItem) URL(mods ...qm.QueryMod) normalizedURLQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.URLID),
	}

	queryMods = append(queryMods, mods...)

	return NormalizedUrls(queryMods...)
}

// Posts retrieves all the post's Posts with an executor.
func (o *RSSItem) Posts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"posts\".\"rss_item_id\"=?", o.ID),
	)

	return Posts(queryMods...)
}

// UserFeedItems retrieves all the user_feed_item's UserFeedItems with an executor.
func (o *RSSItem) UserFeedItems(mods ...qm.QueryMod) userFeedItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_feed_items\".\"rss_item_id\"=?", o.ID),
	)

	return UserFeedItems(queryMods...)
}

// LoadFeed allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rssItemL) LoadFeed(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRSSItem interface{}, mods queries.Applicator) error {
	var slice []*RSSItem
	var object *RSSItem

	if singular {
		var ok bool
		object, ok = maybeRSSItem.(*RSSItem)
		if !ok {
			object = new(RSSItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRSSItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRSSItem))
			}
		}
	} else {
		s, ok := maybeRSSItem.(*[]*RSSItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRSSItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRSSItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rssItemR{}
		}
		args[object.FeedID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rssItemR{}
			}

			args[obj.FeedID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rss_feeds`),
		qm.WhereIn(`rss_feeds.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RSSFeed")
	}

	var resultSlice []*RSSFeed
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RSSFeed")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rss_feeds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rss_feeds")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Feed = foreign
		if foreign.R == nil {
			foreign.R = &rssFeedR{}
		}
		foreign.R.FeedRSSItems = append(foreign.R.FeedRSSItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FeedID == foreign.ID {
				local.R.Feed = foreign
				if foreign.R == nil {
					foreign.R = &rssFeedR{}
				}
				foreign.R.FeedRSSItems = append(foreign.R.FeedRSSItems, local)
				break
			}
		}
	}

	return nil
}

// LoadURL allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rssItemL) LoadURL(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRSSItem interface{}, mods queries.Applicator) error {
	var slice []*RSSItem
	var object *RSSItem

	if singular {
		var ok bool
		object, ok = maybeRSSItem.(*RSSItem)
		if !ok {
			object = new(RSSItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRSSItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRSSItem))
			}
		}
	} else {
		s, ok := maybeRSSItem.(*[]*RSSItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRSSItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRSSItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rssItemR{}
		}
		args[object.URLID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rssItemR{}
			}

			args[obj.URLID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`normalized_urls`),
		qm.WhereIn(`normalized_urls.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NormalizedURL")
	}

	var resultSlice []*NormalizedURL
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NormalizedURL")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for normalized_urls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for normalized_urls")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.URL = foreign
		if foreign.R == nil {
			foreign.R = &normalizedURLR{}
		}
		foreign.R.URLRSSItems = append(foreign.R.URLRSSItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.URLID == foreign.ID {
				local.R.URL = foreign
				if foreign.R == nil {
					foreign.R = &normalizedURLR{}
				}
				foreign.R.URLRSSItems = append(foreign.R.URLRSSItems, local)
				break
			}
		}
	}

	return nil
}

// LoadPosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rssItemL) LoadPosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRSSItem interface{}, mods queries.Applicator) error {
	var slice []*RSSItem
	var object *RSSItem

	if singular {
		var ok bool
		object, ok = maybeRSSItem.(*RSSItem)
		if !ok {
			object = new(RSSItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRSSItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRSSItem))
			}
		}
	} else {
		s, ok := maybeRSSItem.(*[]*RSSItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRSSItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRSSItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rssItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rssItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.rss_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load posts")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice posts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if singular {
		object.R.Posts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.RSSItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RSSItemID) {
				local.R.Posts = append(local.R.Posts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.RSSItem = local
				break
			}
		}
	}

	return nil
}

// LoadUserFeedItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rssItemL) LoadUserFeedItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRSSItem interface{}, mods queries.Applicator) error {
	var slice []*RSSItem
	var object *RSSItem

	if singular {
		var ok bool
		object, ok = maybeRSSItem.(*RSSItem)
		if !ok {
			object = new(RSSItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRSSItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRSSItem))
			}
		}
	} else {
		s, ok := maybeRSSItem.(*[]*RSSItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRSSItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRSSItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rssItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rssItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_feed_items`),
		qm.WhereIn(`user_feed_items.rss_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_feed_items")
	}

	var resultSlice []*UserFeedItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_feed_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_feed_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_feed_items")
	}

	if singular {
		object.R.UserFeedItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userFeedItemR{}
			}
			foreign.R.RSSItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RSSItemID {
				local.R.UserFeedItems = append(local.R.UserFeedItems, foreign)
				if foreign.R == nil {
					foreign.R = &userFeedItemR{}
				}
				foreign.R.RSSItem = local
				break
			}
		}
	}

	return nil
}

// SetFeedP of the rssItem to the related item.
// Sets o.R.Feed to related.
// Adds o to related.R.FeedRSSItems.
// Panics on error.
func (o *RSSItem) SetFeedP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RSSFeed) {
	if err := o.SetFeed(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFeed of the rssItem to the related item.
// Sets o.R.Feed to related.
// Adds o to related.R.FeedRSSItems.
func (o *RSSItem) SetFeed(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RSSFeed) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rss_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"feed_id"}),
		strmangle.WhereClause("\"", "\"", 2, rssItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FeedID = related.ID
	if o.R == nil {
		o.R = &rssItemR{
			Feed: related,
		}
	} else {
		o.R.Feed = related
	}

	if related.R == nil {
		related.R = &rssFeedR{
			FeedRSSItems: RSSItemSlice{o},
		}
	} else {
		related.R.FeedRSSItems = append(related.R.FeedRSSItems, o)
	}

	return nil
}

// SetURLP of the rssItem to the related item.
// Sets o.R.URL to related.
// Adds o to related.R.URLRSSItems.
// Panics on error.
func (o *RSSItem) SetURLP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NormalizedURL) {
	if err := o.SetURL(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetURL of the rssItem to the related item.
// Sets o.R.URL to related.
// Adds o to related.R.URLRSSItems.
func (o *RSSItem) SetURL(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NormalizedURL) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rss_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"url_id"}),
		strmangle.WhereClause("\"", "\"", 2, rssItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.URLID = related.ID
	if o.R == nil {
		o.R = &rssItemR{
			URL: related,
		}
	} else {
		o.R.URL = related
	}

	if related.R == nil {
		related.R = &normalizedURLR{
			URLRSSItems: RSSItemSlice{o},
		}
	} else {
		related.R.URLRSSItems = append(related.R.URLRSSItems, o)
	}

	return nil
}

// AddPostsP adds the given related objects to the existing relationships
// of the rss_item, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.RSSItem appropriately.
// Panics on error.
func (o *RSSItem) AddPostsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) {
	if err := o.AddPosts(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPosts adds the given related objects to the existing relationships
// of the rss_item, optionally inserting them as new records.
// Appends related to o.R.Posts.
// Sets related.R.RSSItem appropriately.
func (o *RSSItem) AddPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RSSItemID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"posts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"rss_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, postPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RSSItemID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &rssItemR{
			Posts: related,
		}
	} else {
		o.R.Posts = append(o.R.Posts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				RSSItem: o,
			}
		} else {
			rel.R.RSSItem = o
		}
	}
	return nil
}

// SetPostsP removes all previously related items of the
// rss_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RSSItem's Posts accordingly.
// Replaces o.R.Posts with related.
// Sets related.R.RSSItem's Posts accordingly.
// Panics on error.
func (o *RSSItem) SetPostsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) {
	if err := o.SetPosts(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPosts removes all previously related items of the
// rss_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RSSItem's Posts accordingly.
// Replaces o.R.Posts with related.
// Sets related.R.RSSItem's Posts accordingly.
func (o *RSSItem) SetPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	query := "update \"posts\" set \"rss_item_id\" = null where \"rss_item_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Posts {
			queries.SetScanner(&rel.RSSItemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RSSItem = nil
		}
		o.R.Posts = nil
	}

	return o.AddPosts(ctx, exec, insert, related...)
}

// RemovePostsP relationships from objects passed in.
// Removes related items from R.Posts (uses pointer comparison, removal does not keep order)
// Sets related.R.RSSItem.
// Panics on error.
func (o *RSSItem) RemovePostsP(ctx context.Context, exec boil.ContextExecutor, related ...*Post) {
	if err := o.RemovePosts(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePosts relationships from objects passed in.
// Removes related items from R.Posts (uses pointer comparison, removal does not keep order)
// Sets related.R.RSSItem.
func (o *RSSItem) RemovePosts(ctx context.Context, exec boil.ContextExecutor, related ...*Post) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RSSItemID, nil)
		if rel.R != nil {
			rel.R.RSSItem = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("rss_item_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Posts {
			if rel != ri {
				continue
			}

			ln := len(o.R.Posts)
			if ln > 1 && i < ln-1 {
				o.R.Posts[i] = o.R.Posts[ln-1]
			}
			o.R.Posts = o.R.Posts[:ln-1]
			break
		}
	}

	return nil
}

// AddUserFeedItemsP adds the given related objects to the existing relationships
// of the rss_item, optionally inserting them as new records.
// Appends related to o.R.UserFeedItems.
// Sets related.R.RSSItem appropriately.
// Panics on error.
func (o *RSSItem) AddUserFeedItemsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserFeedItem) {
	if err := o.AddUserFeedItems(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserFeedItems adds the given related objects to the existing relationships
// of the rss_item, optionally inserting them as new records.
// Appends related to o.R.UserFeedItems.
// Sets related.R.RSSItem appropriately.
func (o *RSSItem) AddUserFeedItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserFeedItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RSSItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_feed_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"rss_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, userFeedItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RSSItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &rssItemR{
			UserFeedItems: related,
		}
	} else {
		o.R.UserFeedItems = append(o.R.UserFeedItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userFeedItemR{
				RSSItem: o,
			}
		} else {
			rel.R.RSSItem = o
		}
	}
	return nil
}

// RSSItems retrieves all the records using an executor.
func RSSItems(mods ...qm.QueryMod) rssItemQuery {
	mods = append(mods, qm.From("\"rss_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rss_items\".*"})
	}

	return rssItemQuery{q}
}

// FindRSSItemP retrieves a single record by ID with an executor, and panics on error.
func FindRSSItemP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *RSSItem {
	retobj, err := FindRSSItem(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRSSItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRSSItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RSSItem, error) {
	rssItemObj := &RSSItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rss_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, rssItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from rss_items")
	}

	return rssItemObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *RSSItem) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RSSItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no rss_items provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(rssItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rssItemInsertCacheMut.RLock()
	cache, cached := rssItemInsertCache[key]
	rssItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rssItemAllColumns,
			rssItemColumnsWithDefault,
			rssItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rssItemType, rssItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rssItemType, rssItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rss_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rss_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into rss_items")
	}

	if !cached {
		rssItemInsertCacheMut.Lock()
		rssItemInsertCache[key] = cache
		rssItemInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the RSSItem, and panics on error.
// See Update for more documentation.
func (o *RSSItem) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the RSSItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RSSItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	rssItemUpdateCacheMut.RLock()
	cache, cached := rssItemUpdateCache[key]
	rssItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rssItemAllColumns,
			rssItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update rss_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rss_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rssItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rssItemType, rssItemMapping, append(wl, rssItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update rss_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for rss_items")
	}

	if !cached {
		rssItemUpdateCacheMut.Lock()
		rssItemUpdateCache[key] = cache
		rssItemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q rssItemQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q rssItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for rss_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for rss_items")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RSSItemSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RSSItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rssItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rss_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rssItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in rssItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all rssItem")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *RSSItem) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RSSItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no rss_items provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(rssItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rssItemUpsertCacheMut.RLock()
	cache, cached := rssItemUpsertCache[key]
	rssItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			rssItemAllColumns,
			rssItemColumnsWithDefault,
			rssItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rssItemAllColumns,
			rssItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert rss_items, could not build update column list")
		}

		ret := strmangle.SetComplement(rssItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(rssItemPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert rss_items, could not build conflict column list")
			}

			conflict = make([]string, len(rssItemPrimaryKeyColumns))
			copy(conflict, rssItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rss_items\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(rssItemType, rssItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rssItemType, rssItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert rss_items")
	}

	if !cached {
		rssItemUpsertCacheMut.Lock()
		rssItemUpsertCache[key] = cache
		rssItemUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single RSSItem record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *RSSItem) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single RSSItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RSSItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no RSSItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rssItemPrimaryKeyMapping)
	sql := "DELETE FROM \"rss_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from rss_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for rss_items")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q rssItemQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q rssItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no rssItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from rss_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for rss_items")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RSSItemSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RSSItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rssItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rss_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rssItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from rssItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for rss_items")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *RSSItem) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RSSItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRSSItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RSSItemSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RSSItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RSSItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rssItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rss_items\".* FROM \"rss_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rssItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in RSSItemSlice")
	}

	*o = slice

	return nil
}

// RSSItemExistsP checks if the RSSItem row exists. Panics on error.
func RSSItemExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := RSSItemExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RSSItemExists checks if the RSSItem row exists.
func RSSItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rss_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if rss_items exists")
	}

	return exists, nil
}

// Exists checks if the RSSItem row exists.
func (o *RSSItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RSSItemExists(ctx, exec, o.ID)
}
