// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserConnection is an object representing the database table.
type UserConnection struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	User1ID   string    `boil:"user1_id" json:"user1_id" toml:"user1_id" yaml:"user1_id"`
	User2ID   string    `boil:"user2_id" json:"user2_id" toml:"user2_id" yaml:"user2_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userConnectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userConnectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserConnectionColumns = struct {
	ID        string
	User1ID   string
	User2ID   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	User1ID:   "user1_id",
	User2ID:   "user2_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var UserConnectionTableColumns = struct {
	ID        string
	User1ID   string
	User2ID   string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "user_connections.id",
	User1ID:   "user_connections.user1_id",
	User2ID:   "user_connections.user2_id",
	CreatedAt: "user_connections.created_at",
	UpdatedAt: "user_connections.updated_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var UserConnectionWhere = struct {
	ID        whereHelperstring
	User1ID   whereHelperstring
	User2ID   whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"user_connections\".\"id\""},
	User1ID:   whereHelperstring{field: "\"user_connections\".\"user1_id\""},
	User2ID:   whereHelperstring{field: "\"user_connections\".\"user2_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"user_connections\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"user_connections\".\"updated_at\""},
}

// UserConnectionRels is where relationship names are stored.
var UserConnectionRels = struct {
	User1                            string
	User2                            string
	ConnectionWhitelistedConnections string
}{
	User1:                            "User1",
	User2:                            "User2",
	ConnectionWhitelistedConnections: "ConnectionWhitelistedConnections",
}

// userConnectionR is where relationships are stored.
type userConnectionR struct {
	User1                            *User                      `boil:"User1" json:"User1" toml:"User1" yaml:"User1"`
	User2                            *User                      `boil:"User2" json:"User2" toml:"User2" yaml:"User2"`
	ConnectionWhitelistedConnections WhitelistedConnectionSlice `boil:"ConnectionWhitelistedConnections" json:"ConnectionWhitelistedConnections" toml:"ConnectionWhitelistedConnections" yaml:"ConnectionWhitelistedConnections"`
}

// NewStruct creates a new relationship struct
func (*userConnectionR) NewStruct() *userConnectionR {
	return &userConnectionR{}
}

func (r *userConnectionR) GetUser1() *User {
	if r == nil {
		return nil
	}
	return r.User1
}

func (r *userConnectionR) GetUser2() *User {
	if r == nil {
		return nil
	}
	return r.User2
}

func (r *userConnectionR) GetConnectionWhitelistedConnections() WhitelistedConnectionSlice {
	if r == nil {
		return nil
	}
	return r.ConnectionWhitelistedConnections
}

// userConnectionL is where Load methods for each relationship are stored.
type userConnectionL struct{}

var (
	userConnectionAllColumns            = []string{"id", "user1_id", "user2_id", "created_at", "updated_at"}
	userConnectionColumnsWithoutDefault = []string{"id", "user1_id", "user2_id", "created_at", "updated_at"}
	userConnectionColumnsWithDefault    = []string{}
	userConnectionPrimaryKeyColumns     = []string{"id"}
	userConnectionGeneratedColumns      = []string{}
)

type (
	// UserConnectionSlice is an alias for a slice of pointers to UserConnection.
	// This should almost always be used instead of []UserConnection.
	UserConnectionSlice []*UserConnection

	userConnectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userConnectionType                 = reflect.TypeOf(&UserConnection{})
	userConnectionMapping              = queries.MakeStructMapping(userConnectionType)
	userConnectionPrimaryKeyMapping, _ = queries.BindMapping(userConnectionType, userConnectionMapping, userConnectionPrimaryKeyColumns)
	userConnectionInsertCacheMut       sync.RWMutex
	userConnectionInsertCache          = make(map[string]insertCache)
	userConnectionUpdateCacheMut       sync.RWMutex
	userConnectionUpdateCache          = make(map[string]updateCache)
	userConnectionUpsertCacheMut       sync.RWMutex
	userConnectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single userConnection record from the query, and panics on error.
func (q userConnectionQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *UserConnection {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userConnection record from the query.
func (q userConnectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserConnection, error) {
	o := &UserConnection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for user_connections")
	}

	return o, nil
}

// AllP returns all UserConnection records from the query, and panics on error.
func (q userConnectionQuery) AllP(ctx context.Context, exec boil.ContextExecutor) UserConnectionSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserConnection records from the query.
func (q userConnectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserConnectionSlice, error) {
	var o []*UserConnection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to UserConnection slice")
	}

	return o, nil
}

// CountP returns the count of all UserConnection records in the query, and panics on error.
func (q userConnectionQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserConnection records in the query.
func (q userConnectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count user_connections rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q userConnectionQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userConnectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if user_connections exists")
	}

	return count > 0, nil
}

// User1 pointed to by the foreign key.
func (o *UserConnection) User1(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.User1ID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// User2 pointed to by the foreign key.
func (o *UserConnection) User2(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.User2ID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ConnectionWhitelistedConnections retrieves all the whitelisted_connection's WhitelistedConnections with an executor via connection_id column.
func (o *UserConnection) ConnectionWhitelistedConnections(mods ...qm.QueryMod) whitelistedConnectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"whitelisted_connections\".\"connection_id\"=?", o.ID),
	)

	return WhitelistedConnections(queryMods...)
}

// LoadUser1 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userConnectionL) LoadUser1(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserConnection interface{}, mods queries.Applicator) error {
	var slice []*UserConnection
	var object *UserConnection

	if singular {
		var ok bool
		object, ok = maybeUserConnection.(*UserConnection)
		if !ok {
			object = new(UserConnection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserConnection))
			}
		}
	} else {
		s, ok := maybeUserConnection.(*[]*UserConnection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserConnection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userConnectionR{}
		}
		args[object.User1ID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userConnectionR{}
			}

			args[obj.User1ID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User1 = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.User1UserConnections = append(foreign.R.User1UserConnections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.User1ID == foreign.ID {
				local.R.User1 = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.User1UserConnections = append(foreign.R.User1UserConnections, local)
				break
			}
		}
	}

	return nil
}

// LoadUser2 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userConnectionL) LoadUser2(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserConnection interface{}, mods queries.Applicator) error {
	var slice []*UserConnection
	var object *UserConnection

	if singular {
		var ok bool
		object, ok = maybeUserConnection.(*UserConnection)
		if !ok {
			object = new(UserConnection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserConnection))
			}
		}
	} else {
		s, ok := maybeUserConnection.(*[]*UserConnection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserConnection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userConnectionR{}
		}
		args[object.User2ID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userConnectionR{}
			}

			args[obj.User2ID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User2 = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.User2UserConnections = append(foreign.R.User2UserConnections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.User2ID == foreign.ID {
				local.R.User2 = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.User2UserConnections = append(foreign.R.User2UserConnections, local)
				break
			}
		}
	}

	return nil
}

// LoadConnectionWhitelistedConnections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userConnectionL) LoadConnectionWhitelistedConnections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserConnection interface{}, mods queries.Applicator) error {
	var slice []*UserConnection
	var object *UserConnection

	if singular {
		var ok bool
		object, ok = maybeUserConnection.(*UserConnection)
		if !ok {
			object = new(UserConnection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserConnection))
			}
		}
	} else {
		s, ok := maybeUserConnection.(*[]*UserConnection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserConnection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userConnectionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userConnectionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`whitelisted_connections`),
		qm.WhereIn(`whitelisted_connections.connection_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load whitelisted_connections")
	}

	var resultSlice []*WhitelistedConnection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice whitelisted_connections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on whitelisted_connections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for whitelisted_connections")
	}

	if singular {
		object.R.ConnectionWhitelistedConnections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &whitelistedConnectionR{}
			}
			foreign.R.Connection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ConnectionID) {
				local.R.ConnectionWhitelistedConnections = append(local.R.ConnectionWhitelistedConnections, foreign)
				if foreign.R == nil {
					foreign.R = &whitelistedConnectionR{}
				}
				foreign.R.Connection = local
				break
			}
		}
	}

	return nil
}

// SetUser1P of the userConnection to the related item.
// Sets o.R.User1 to related.
// Adds o to related.R.User1UserConnections.
// Panics on error.
func (o *UserConnection) SetUser1P(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetUser1(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser1 of the userConnection to the related item.
// Sets o.R.User1 to related.
// Adds o to related.R.User1UserConnections.
func (o *UserConnection) SetUser1(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user1_id"}),
		strmangle.WhereClause("\"", "\"", 2, userConnectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.User1ID = related.ID
	if o.R == nil {
		o.R = &userConnectionR{
			User1: related,
		}
	} else {
		o.R.User1 = related
	}

	if related.R == nil {
		related.R = &userR{
			User1UserConnections: UserConnectionSlice{o},
		}
	} else {
		related.R.User1UserConnections = append(related.R.User1UserConnections, o)
	}

	return nil
}

// SetUser2P of the userConnection to the related item.
// Sets o.R.User2 to related.
// Adds o to related.R.User2UserConnections.
// Panics on error.
func (o *UserConnection) SetUser2P(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetUser2(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser2 of the userConnection to the related item.
// Sets o.R.User2 to related.
// Adds o to related.R.User2UserConnections.
func (o *UserConnection) SetUser2(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user2_id"}),
		strmangle.WhereClause("\"", "\"", 2, userConnectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.User2ID = related.ID
	if o.R == nil {
		o.R = &userConnectionR{
			User2: related,
		}
	} else {
		o.R.User2 = related
	}

	if related.R == nil {
		related.R = &userR{
			User2UserConnections: UserConnectionSlice{o},
		}
	} else {
		related.R.User2UserConnections = append(related.R.User2UserConnections, o)
	}

	return nil
}

// AddConnectionWhitelistedConnectionsP adds the given related objects to the existing relationships
// of the user_connection, optionally inserting them as new records.
// Appends related to o.R.ConnectionWhitelistedConnections.
// Sets related.R.Connection appropriately.
// Panics on error.
func (o *UserConnection) AddConnectionWhitelistedConnectionsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WhitelistedConnection) {
	if err := o.AddConnectionWhitelistedConnections(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddConnectionWhitelistedConnections adds the given related objects to the existing relationships
// of the user_connection, optionally inserting them as new records.
// Appends related to o.R.ConnectionWhitelistedConnections.
// Sets related.R.Connection appropriately.
func (o *UserConnection) AddConnectionWhitelistedConnections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WhitelistedConnection) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ConnectionID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"whitelisted_connections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"connection_id"}),
				strmangle.WhereClause("\"", "\"", 2, whitelistedConnectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ConnectionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userConnectionR{
			ConnectionWhitelistedConnections: related,
		}
	} else {
		o.R.ConnectionWhitelistedConnections = append(o.R.ConnectionWhitelistedConnections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &whitelistedConnectionR{
				Connection: o,
			}
		} else {
			rel.R.Connection = o
		}
	}
	return nil
}

// SetConnectionWhitelistedConnectionsP removes all previously related items of the
// user_connection replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Connection's ConnectionWhitelistedConnections accordingly.
// Replaces o.R.ConnectionWhitelistedConnections with related.
// Sets related.R.Connection's ConnectionWhitelistedConnections accordingly.
// Panics on error.
func (o *UserConnection) SetConnectionWhitelistedConnectionsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WhitelistedConnection) {
	if err := o.SetConnectionWhitelistedConnections(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetConnectionWhitelistedConnections removes all previously related items of the
// user_connection replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Connection's ConnectionWhitelistedConnections accordingly.
// Replaces o.R.ConnectionWhitelistedConnections with related.
// Sets related.R.Connection's ConnectionWhitelistedConnections accordingly.
func (o *UserConnection) SetConnectionWhitelistedConnections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WhitelistedConnection) error {
	query := "update \"whitelisted_connections\" set \"connection_id\" = null where \"connection_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ConnectionWhitelistedConnections {
			queries.SetScanner(&rel.ConnectionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Connection = nil
		}
		o.R.ConnectionWhitelistedConnections = nil
	}

	return o.AddConnectionWhitelistedConnections(ctx, exec, insert, related...)
}

// RemoveConnectionWhitelistedConnectionsP relationships from objects passed in.
// Removes related items from R.ConnectionWhitelistedConnections (uses pointer comparison, removal does not keep order)
// Sets related.R.Connection.
// Panics on error.
func (o *UserConnection) RemoveConnectionWhitelistedConnectionsP(ctx context.Context, exec boil.ContextExecutor, related ...*WhitelistedConnection) {
	if err := o.RemoveConnectionWhitelistedConnections(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveConnectionWhitelistedConnections relationships from objects passed in.
// Removes related items from R.ConnectionWhitelistedConnections (uses pointer comparison, removal does not keep order)
// Sets related.R.Connection.
func (o *UserConnection) RemoveConnectionWhitelistedConnections(ctx context.Context, exec boil.ContextExecutor, related ...*WhitelistedConnection) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ConnectionID, nil)
		if rel.R != nil {
			rel.R.Connection = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("connection_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ConnectionWhitelistedConnections {
			if rel != ri {
				continue
			}

			ln := len(o.R.ConnectionWhitelistedConnections)
			if ln > 1 && i < ln-1 {
				o.R.ConnectionWhitelistedConnections[i] = o.R.ConnectionWhitelistedConnections[ln-1]
			}
			o.R.ConnectionWhitelistedConnections = o.R.ConnectionWhitelistedConnections[:ln-1]
			break
		}
	}

	return nil
}

// UserConnections retrieves all the records using an executor.
func UserConnections(mods ...qm.QueryMod) userConnectionQuery {
	mods = append(mods, qm.From("\"user_connections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_connections\".*"})
	}

	return userConnectionQuery{q}
}

// FindUserConnectionP retrieves a single record by ID with an executor, and panics on error.
func FindUserConnectionP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *UserConnection {
	retobj, err := FindUserConnection(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserConnection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserConnection(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserConnection, error) {
	userConnectionObj := &UserConnection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_connections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userConnectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from user_connections")
	}

	return userConnectionObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserConnection) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserConnection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no user_connections provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userConnectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userConnectionInsertCacheMut.RLock()
	cache, cached := userConnectionInsertCache[key]
	userConnectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userConnectionAllColumns,
			userConnectionColumnsWithDefault,
			userConnectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userConnectionType, userConnectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userConnectionType, userConnectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_connections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_connections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into user_connections")
	}

	if !cached {
		userConnectionInsertCacheMut.Lock()
		userConnectionInsertCache[key] = cache
		userConnectionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the UserConnection, and panics on error.
// See Update for more documentation.
func (o *UserConnection) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the UserConnection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserConnection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	userConnectionUpdateCacheMut.RLock()
	cache, cached := userConnectionUpdateCache[key]
	userConnectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userConnectionAllColumns,
			userConnectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update user_connections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_connections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userConnectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userConnectionType, userConnectionMapping, append(wl, userConnectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update user_connections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for user_connections")
	}

	if !cached {
		userConnectionUpdateCacheMut.Lock()
		userConnectionUpdateCache[key] = cache
		userConnectionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userConnectionQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q userConnectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for user_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for user_connections")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserConnectionSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserConnectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userConnectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in userConnection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all userConnection")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserConnection) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserConnection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no user_connections provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(userConnectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userConnectionUpsertCacheMut.RLock()
	cache, cached := userConnectionUpsertCache[key]
	userConnectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userConnectionAllColumns,
			userConnectionColumnsWithDefault,
			userConnectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userConnectionAllColumns,
			userConnectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert user_connections, could not build update column list")
		}

		ret := strmangle.SetComplement(userConnectionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userConnectionPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert user_connections, could not build conflict column list")
			}

			conflict = make([]string, len(userConnectionPrimaryKeyColumns))
			copy(conflict, userConnectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_connections\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userConnectionType, userConnectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userConnectionType, userConnectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert user_connections")
	}

	if !cached {
		userConnectionUpsertCacheMut.Lock()
		userConnectionUpsertCache[key] = cache
		userConnectionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single UserConnection record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserConnection) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single UserConnection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserConnection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no UserConnection provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userConnectionPrimaryKeyMapping)
	sql := "DELETE FROM \"user_connections\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from user_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for user_connections")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userConnectionQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q userConnectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no userConnectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from user_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for user_connections")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserConnectionSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserConnectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userConnectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from userConnection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for user_connections")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserConnection) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserConnection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserConnection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserConnectionSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserConnectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserConnectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_connections\".* FROM \"user_connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userConnectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in UserConnectionSlice")
	}

	*o = slice

	return nil
}

// UserConnectionExistsP checks if the UserConnection row exists. Panics on error.
func UserConnectionExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := UserConnectionExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserConnectionExists checks if the UserConnection row exists.
func UserConnectionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_connections\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if user_connections exists")
	}

	return exists, nil
}

// Exists checks if the UserConnection row exists.
func (o *UserConnection) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserConnectionExists(ctx, exec, o.ID)
}
