// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NormalizedURL is an object representing the database table.
type NormalizedURL struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	URL       string    `boil:"url" json:"url" toml:"url" yaml:"url"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *normalizedURLR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L normalizedURLL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NormalizedURLColumns = struct {
	ID        string
	URL       string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	URL:       "url",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var NormalizedURLTableColumns = struct {
	ID        string
	URL       string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "normalized_urls.id",
	URL:       "normalized_urls.url",
	CreatedAt: "normalized_urls.created_at",
	UpdatedAt: "normalized_urls.updated_at",
}

// Generated where

var NormalizedURLWhere = struct {
	ID        whereHelperstring
	URL       whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"normalized_urls\".\"id\""},
	URL:       whereHelperstring{field: "\"normalized_urls\".\"url\""},
	CreatedAt: whereHelpertime_Time{field: "\"normalized_urls\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"normalized_urls\".\"updated_at\""},
}

// NormalizedURLRels is where relationship names are stored.
var NormalizedURLRels = struct {
	URLPosts         string
	URLRSSItems      string
	URLUserFeedItems string
}{
	URLPosts:         "URLPosts",
	URLRSSItems:      "URLRSSItems",
	URLUserFeedItems: "URLUserFeedItems",
}

// normalizedURLR is where relationships are stored.
type normalizedURLR struct {
	URLPosts         PostSlice         `boil:"URLPosts" json:"URLPosts" toml:"URLPosts" yaml:"URLPosts"`
	URLRSSItems      RSSItemSlice      `boil:"URLRSSItems" json:"URLRSSItems" toml:"URLRSSItems" yaml:"URLRSSItems"`
	URLUserFeedItems UserFeedItemSlice `boil:"URLUserFeedItems" json:"URLUserFeedItems" toml:"URLUserFeedItems" yaml:"URLUserFeedItems"`
}

// NewStruct creates a new relationship struct
func (*normalizedURLR) NewStruct() *normalizedURLR {
	return &normalizedURLR{}
}

func (r *normalizedURLR) GetURLPosts() PostSlice {
	if r == nil {
		return nil
	}
	return r.URLPosts
}

func (r *normalizedURLR) GetURLRSSItems() RSSItemSlice {
	if r == nil {
		return nil
	}
	return r.URLRSSItems
}

func (r *normalizedURLR) GetURLUserFeedItems() UserFeedItemSlice {
	if r == nil {
		return nil
	}
	return r.URLUserFeedItems
}

// normalizedURLL is where Load methods for each relationship are stored.
type normalizedURLL struct{}

var (
	normalizedURLAllColumns            = []string{"id", "url", "created_at", "updated_at"}
	normalizedURLColumnsWithoutDefault = []string{"id", "url", "created_at", "updated_at"}
	normalizedURLColumnsWithDefault    = []string{}
	normalizedURLPrimaryKeyColumns     = []string{"id"}
	normalizedURLGeneratedColumns      = []string{}
)

type (
	// NormalizedURLSlice is an alias for a slice of pointers to NormalizedURL.
	// This should almost always be used instead of []NormalizedURL.
	NormalizedURLSlice []*NormalizedURL

	normalizedURLQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	normalizedURLType                 = reflect.TypeOf(&NormalizedURL{})
	normalizedURLMapping              = queries.MakeStructMapping(normalizedURLType)
	normalizedURLPrimaryKeyMapping, _ = queries.BindMapping(normalizedURLType, normalizedURLMapping, normalizedURLPrimaryKeyColumns)
	normalizedURLInsertCacheMut       sync.RWMutex
	normalizedURLInsertCache          = make(map[string]insertCache)
	normalizedURLUpdateCacheMut       sync.RWMutex
	normalizedURLUpdateCache          = make(map[string]updateCache)
	normalizedURLUpsertCacheMut       sync.RWMutex
	normalizedURLUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single normalizedURL record from the query, and panics on error.
func (q normalizedURLQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *NormalizedURL {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single normalizedURL record from the query.
func (q normalizedURLQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NormalizedURL, error) {
	o := &NormalizedURL{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for normalized_urls")
	}

	return o, nil
}

// AllP returns all NormalizedURL records from the query, and panics on error.
func (q normalizedURLQuery) AllP(ctx context.Context, exec boil.ContextExecutor) NormalizedURLSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all NormalizedURL records from the query.
func (q normalizedURLQuery) All(ctx context.Context, exec boil.ContextExecutor) (NormalizedURLSlice, error) {
	var o []*NormalizedURL

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to NormalizedURL slice")
	}

	return o, nil
}

// CountP returns the count of all NormalizedURL records in the query, and panics on error.
func (q normalizedURLQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all NormalizedURL records in the query.
func (q normalizedURLQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count normalized_urls rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q normalizedURLQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q normalizedURLQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if normalized_urls exists")
	}

	return count > 0, nil
}

// URLPosts retrieves all the post's Posts with an executor via url_id column.
func (o *NormalizedURL) URLPosts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"posts\".\"url_id\"=?", o.ID),
	)

	return Posts(queryMods...)
}

// URLRSSItems retrieves all the rss_item's RSSItems with an executor via url_id column.
func (o *NormalizedURL) URLRSSItems(mods ...qm.QueryMod) rssItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"rss_items\".\"url_id\"=?", o.ID),
	)

	return RSSItems(queryMods...)
}

// URLUserFeedItems retrieves all the user_feed_item's UserFeedItems with an executor via url_id column.
func (o *NormalizedURL) URLUserFeedItems(mods ...qm.QueryMod) userFeedItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_feed_items\".\"url_id\"=?", o.ID),
	)

	return UserFeedItems(queryMods...)
}

// LoadURLPosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (normalizedURLL) LoadURLPosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNormalizedURL interface{}, mods queries.Applicator) error {
	var slice []*NormalizedURL
	var object *NormalizedURL

	if singular {
		var ok bool
		object, ok = maybeNormalizedURL.(*NormalizedURL)
		if !ok {
			object = new(NormalizedURL)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNormalizedURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNormalizedURL))
			}
		}
	} else {
		s, ok := maybeNormalizedURL.(*[]*NormalizedURL)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNormalizedURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNormalizedURL))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &normalizedURLR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &normalizedURLR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.url_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load posts")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice posts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if singular {
		object.R.URLPosts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.URL = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.URLID) {
				local.R.URLPosts = append(local.R.URLPosts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.URL = local
				break
			}
		}
	}

	return nil
}

// LoadURLRSSItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (normalizedURLL) LoadURLRSSItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNormalizedURL interface{}, mods queries.Applicator) error {
	var slice []*NormalizedURL
	var object *NormalizedURL

	if singular {
		var ok bool
		object, ok = maybeNormalizedURL.(*NormalizedURL)
		if !ok {
			object = new(NormalizedURL)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNormalizedURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNormalizedURL))
			}
		}
	} else {
		s, ok := maybeNormalizedURL.(*[]*NormalizedURL)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNormalizedURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNormalizedURL))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &normalizedURLR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &normalizedURLR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rss_items`),
		qm.WhereIn(`rss_items.url_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rss_items")
	}

	var resultSlice []*RSSItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rss_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rss_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rss_items")
	}

	if singular {
		object.R.URLRSSItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rssItemR{}
			}
			foreign.R.URL = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.URLID {
				local.R.URLRSSItems = append(local.R.URLRSSItems, foreign)
				if foreign.R == nil {
					foreign.R = &rssItemR{}
				}
				foreign.R.URL = local
				break
			}
		}
	}

	return nil
}

// LoadURLUserFeedItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (normalizedURLL) LoadURLUserFeedItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNormalizedURL interface{}, mods queries.Applicator) error {
	var slice []*NormalizedURL
	var object *NormalizedURL

	if singular {
		var ok bool
		object, ok = maybeNormalizedURL.(*NormalizedURL)
		if !ok {
			object = new(NormalizedURL)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeNormalizedURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeNormalizedURL))
			}
		}
	} else {
		s, ok := maybeNormalizedURL.(*[]*NormalizedURL)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeNormalizedURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeNormalizedURL))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &normalizedURLR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &normalizedURLR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_feed_items`),
		qm.WhereIn(`user_feed_items.url_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_feed_items")
	}

	var resultSlice []*UserFeedItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_feed_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_feed_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_feed_items")
	}

	if singular {
		object.R.URLUserFeedItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userFeedItemR{}
			}
			foreign.R.URL = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.URLID {
				local.R.URLUserFeedItems = append(local.R.URLUserFeedItems, foreign)
				if foreign.R == nil {
					foreign.R = &userFeedItemR{}
				}
				foreign.R.URL = local
				break
			}
		}
	}

	return nil
}

// AddURLPostsP adds the given related objects to the existing relationships
// of the normalized_url, optionally inserting them as new records.
// Appends related to o.R.URLPosts.
// Sets related.R.URL appropriately.
// Panics on error.
func (o *NormalizedURL) AddURLPostsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) {
	if err := o.AddURLPosts(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddURLPosts adds the given related objects to the existing relationships
// of the normalized_url, optionally inserting them as new records.
// Appends related to o.R.URLPosts.
// Sets related.R.URL appropriately.
func (o *NormalizedURL) AddURLPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.URLID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"posts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"url_id"}),
				strmangle.WhereClause("\"", "\"", 2, postPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.URLID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &normalizedURLR{
			URLPosts: related,
		}
	} else {
		o.R.URLPosts = append(o.R.URLPosts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				URL: o,
			}
		} else {
			rel.R.URL = o
		}
	}
	return nil
}

// SetURLPostsP removes all previously related items of the
// normalized_url replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.URL's URLPosts accordingly.
// Replaces o.R.URLPosts with related.
// Sets related.R.URL's URLPosts accordingly.
// Panics on error.
func (o *NormalizedURL) SetURLPostsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) {
	if err := o.SetURLPosts(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetURLPosts removes all previously related items of the
// normalized_url replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.URL's URLPosts accordingly.
// Replaces o.R.URLPosts with related.
// Sets related.R.URL's URLPosts accordingly.
func (o *NormalizedURL) SetURLPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	query := "update \"posts\" set \"url_id\" = null where \"url_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.URLPosts {
			queries.SetScanner(&rel.URLID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.URL = nil
		}
		o.R.URLPosts = nil
	}

	return o.AddURLPosts(ctx, exec, insert, related...)
}

// RemoveURLPostsP relationships from objects passed in.
// Removes related items from R.URLPosts (uses pointer comparison, removal does not keep order)
// Sets related.R.URL.
// Panics on error.
func (o *NormalizedURL) RemoveURLPostsP(ctx context.Context, exec boil.ContextExecutor, related ...*Post) {
	if err := o.RemoveURLPosts(ctx, exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveURLPosts relationships from objects passed in.
// Removes related items from R.URLPosts (uses pointer comparison, removal does not keep order)
// Sets related.R.URL.
func (o *NormalizedURL) RemoveURLPosts(ctx context.Context, exec boil.ContextExecutor, related ...*Post) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.URLID, nil)
		if rel.R != nil {
			rel.R.URL = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("url_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.URLPosts {
			if rel != ri {
				continue
			}

			ln := len(o.R.URLPosts)
			if ln > 1 && i < ln-1 {
				o.R.URLPosts[i] = o.R.URLPosts[ln-1]
			}
			o.R.URLPosts = o.R.URLPosts[:ln-1]
			break
		}
	}

	return nil
}

// AddURLRSSItemsP adds the given related objects to the existing relationships
// of the normalized_url, optionally inserting them as new records.
// Appends related to o.R.URLRSSItems.
// Sets related.R.URL appropriately.
// Panics on error.
func (o *NormalizedURL) AddURLRSSItemsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RSSItem) {
	if err := o.AddURLRSSItems(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddURLRSSItems adds the given related objects to the existing relationships
// of the normalized_url, optionally inserting them as new records.
// Appends related to o.R.URLRSSItems.
// Sets related.R.URL appropriately.
func (o *NormalizedURL) AddURLRSSItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RSSItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.URLID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"rss_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"url_id"}),
				strmangle.WhereClause("\"", "\"", 2, rssItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.URLID = o.ID
		}
	}

	if o.R == nil {
		o.R = &normalizedURLR{
			URLRSSItems: related,
		}
	} else {
		o.R.URLRSSItems = append(o.R.URLRSSItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rssItemR{
				URL: o,
			}
		} else {
			rel.R.URL = o
		}
	}
	return nil
}

// AddURLUserFeedItemsP adds the given related objects to the existing relationships
// of the normalized_url, optionally inserting them as new records.
// Appends related to o.R.URLUserFeedItems.
// Sets related.R.URL appropriately.
// Panics on error.
func (o *NormalizedURL) AddURLUserFeedItemsP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserFeedItem) {
	if err := o.AddURLUserFeedItems(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddURLUserFeedItems adds the given related objects to the existing relationships
// of the normalized_url, optionally inserting them as new records.
// Appends related to o.R.URLUserFeedItems.
// Sets related.R.URL appropriately.
func (o *NormalizedURL) AddURLUserFeedItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserFeedItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.URLID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_feed_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"url_id"}),
				strmangle.WhereClause("\"", "\"", 2, userFeedItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.URLID = o.ID
		}
	}

	if o.R == nil {
		o.R = &normalizedURLR{
			URLUserFeedItems: related,
		}
	} else {
		o.R.URLUserFeedItems = append(o.R.URLUserFeedItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userFeedItemR{
				URL: o,
			}
		} else {
			rel.R.URL = o
		}
	}
	return nil
}

// NormalizedUrls retrieves all the records using an executor.
func NormalizedUrls(mods ...qm.QueryMod) normalizedURLQuery {
	mods = append(mods, qm.From("\"normalized_urls\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"normalized_urls\".*"})
	}

	return normalizedURLQuery{q}
}

// FindNormalizedURLP retrieves a single record by ID with an executor, and panics on error.
func FindNormalizedURLP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *NormalizedURL {
	retobj, err := FindNormalizedURL(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindNormalizedURL retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNormalizedURL(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*NormalizedURL, error) {
	normalizedURLObj := &NormalizedURL{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"normalized_urls\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, normalizedURLObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from normalized_urls")
	}

	return normalizedURLObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *NormalizedURL) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NormalizedURL) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no normalized_urls provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(normalizedURLColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	normalizedURLInsertCacheMut.RLock()
	cache, cached := normalizedURLInsertCache[key]
	normalizedURLInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			normalizedURLAllColumns,
			normalizedURLColumnsWithDefault,
			normalizedURLColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(normalizedURLType, normalizedURLMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(normalizedURLType, normalizedURLMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"normalized_urls\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"normalized_urls\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into normalized_urls")
	}

	if !cached {
		normalizedURLInsertCacheMut.Lock()
		normalizedURLInsertCache[key] = cache
		normalizedURLInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the NormalizedURL, and panics on error.
// See Update for more documentation.
func (o *NormalizedURL) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the NormalizedURL.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NormalizedURL) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	normalizedURLUpdateCacheMut.RLock()
	cache, cached := normalizedURLUpdateCache[key]
	normalizedURLUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			normalizedURLAllColumns,
			normalizedURLPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update normalized_urls, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"normalized_urls\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, normalizedURLPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(normalizedURLType, normalizedURLMapping, append(wl, normalizedURLPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update normalized_urls row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for normalized_urls")
	}

	if !cached {
		normalizedURLUpdateCacheMut.Lock()
		normalizedURLUpdateCache[key] = cache
		normalizedURLUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q normalizedURLQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q normalizedURLQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for normalized_urls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for normalized_urls")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o NormalizedURLSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NormalizedURLSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), normalizedURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"normalized_urls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, normalizedURLPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in normalizedURL slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all normalizedURL")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *NormalizedURL) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NormalizedURL) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no normalized_urls provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(normalizedURLColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	normalizedURLUpsertCacheMut.RLock()
	cache, cached := normalizedURLUpsertCache[key]
	normalizedURLUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			normalizedURLAllColumns,
			normalizedURLColumnsWithDefault,
			normalizedURLColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			normalizedURLAllColumns,
			normalizedURLPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert normalized_urls, could not build update column list")
		}

		ret := strmangle.SetComplement(normalizedURLAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(normalizedURLPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert normalized_urls, could not build conflict column list")
			}

			conflict = make([]string, len(normalizedURLPrimaryKeyColumns))
			copy(conflict, normalizedURLPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"normalized_urls\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(normalizedURLType, normalizedURLMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(normalizedURLType, normalizedURLMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert normalized_urls")
	}

	if !cached {
		normalizedURLUpsertCacheMut.Lock()
		normalizedURLUpsertCache[key] = cache
		normalizedURLUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single NormalizedURL record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *NormalizedURL) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single NormalizedURL record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NormalizedURL) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no NormalizedURL provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), normalizedURLPrimaryKeyMapping)
	sql := "DELETE FROM \"normalized_urls\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from normalized_urls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for normalized_urls")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q normalizedURLQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q normalizedURLQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no normalizedURLQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from normalized_urls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for normalized_urls")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o NormalizedURLSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NormalizedURLSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), normalizedURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"normalized_urls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, normalizedURLPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from normalizedURL slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for normalized_urls")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *NormalizedURL) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NormalizedURL) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNormalizedURL(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NormalizedURLSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NormalizedURLSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NormalizedURLSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), normalizedURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"normalized_urls\".* FROM \"normalized_urls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, normalizedURLPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in NormalizedURLSlice")
	}

	*o = slice

	return nil
}

// NormalizedURLExistsP checks if the NormalizedURL row exists. Panics on error.
func NormalizedURLExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := NormalizedURLExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// NormalizedURLExists checks if the NormalizedURL row exists.
func NormalizedURLExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"normalized_urls\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if normalized_urls exists")
	}

	return exists, nil
}

// Exists checks if the NormalizedURL row exists.
func (o *NormalizedURL) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return NormalizedURLExists(ctx, exec, o.ID)
}
