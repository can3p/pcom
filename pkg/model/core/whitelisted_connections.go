// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package core

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WhitelistedConnection is an object representing the database table.
type WhitelistedConnection struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	WhoID        string      `boil:"who_id" json:"who_id" toml:"who_id" yaml:"who_id"`
	AllowsWhoID  string      `boil:"allows_who_id" json:"allows_who_id" toml:"allows_who_id" yaml:"allows_who_id"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ConnectionID null.String `boil:"connection_id" json:"connection_id,omitempty" toml:"connection_id" yaml:"connection_id,omitempty"`

	R *whitelistedConnectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L whitelistedConnectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WhitelistedConnectionColumns = struct {
	ID           string
	WhoID        string
	AllowsWhoID  string
	CreatedAt    string
	UpdatedAt    string
	ConnectionID string
}{
	ID:           "id",
	WhoID:        "who_id",
	AllowsWhoID:  "allows_who_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	ConnectionID: "connection_id",
}

var WhitelistedConnectionTableColumns = struct {
	ID           string
	WhoID        string
	AllowsWhoID  string
	CreatedAt    string
	UpdatedAt    string
	ConnectionID string
}{
	ID:           "whitelisted_connections.id",
	WhoID:        "whitelisted_connections.who_id",
	AllowsWhoID:  "whitelisted_connections.allows_who_id",
	CreatedAt:    "whitelisted_connections.created_at",
	UpdatedAt:    "whitelisted_connections.updated_at",
	ConnectionID: "whitelisted_connections.connection_id",
}

// Generated where

var WhitelistedConnectionWhere = struct {
	ID           whereHelperstring
	WhoID        whereHelperstring
	AllowsWhoID  whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	ConnectionID whereHelpernull_String
}{
	ID:           whereHelperstring{field: "\"whitelisted_connections\".\"id\""},
	WhoID:        whereHelperstring{field: "\"whitelisted_connections\".\"who_id\""},
	AllowsWhoID:  whereHelperstring{field: "\"whitelisted_connections\".\"allows_who_id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"whitelisted_connections\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"whitelisted_connections\".\"updated_at\""},
	ConnectionID: whereHelpernull_String{field: "\"whitelisted_connections\".\"connection_id\""},
}

// WhitelistedConnectionRels is where relationship names are stored.
var WhitelistedConnectionRels = struct {
	AllowsWho  string
	Connection string
	Who        string
}{
	AllowsWho:  "AllowsWho",
	Connection: "Connection",
	Who:        "Who",
}

// whitelistedConnectionR is where relationships are stored.
type whitelistedConnectionR struct {
	AllowsWho  *User           `boil:"AllowsWho" json:"AllowsWho" toml:"AllowsWho" yaml:"AllowsWho"`
	Connection *UserConnection `boil:"Connection" json:"Connection" toml:"Connection" yaml:"Connection"`
	Who        *User           `boil:"Who" json:"Who" toml:"Who" yaml:"Who"`
}

// NewStruct creates a new relationship struct
func (*whitelistedConnectionR) NewStruct() *whitelistedConnectionR {
	return &whitelistedConnectionR{}
}

func (r *whitelistedConnectionR) GetAllowsWho() *User {
	if r == nil {
		return nil
	}
	return r.AllowsWho
}

func (r *whitelistedConnectionR) GetConnection() *UserConnection {
	if r == nil {
		return nil
	}
	return r.Connection
}

func (r *whitelistedConnectionR) GetWho() *User {
	if r == nil {
		return nil
	}
	return r.Who
}

// whitelistedConnectionL is where Load methods for each relationship are stored.
type whitelistedConnectionL struct{}

var (
	whitelistedConnectionAllColumns            = []string{"id", "who_id", "allows_who_id", "created_at", "updated_at", "connection_id"}
	whitelistedConnectionColumnsWithoutDefault = []string{"id", "who_id", "allows_who_id", "created_at", "updated_at"}
	whitelistedConnectionColumnsWithDefault    = []string{"connection_id"}
	whitelistedConnectionPrimaryKeyColumns     = []string{"id"}
	whitelistedConnectionGeneratedColumns      = []string{}
)

type (
	// WhitelistedConnectionSlice is an alias for a slice of pointers to WhitelistedConnection.
	// This should almost always be used instead of []WhitelistedConnection.
	WhitelistedConnectionSlice []*WhitelistedConnection

	whitelistedConnectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	whitelistedConnectionType                 = reflect.TypeOf(&WhitelistedConnection{})
	whitelistedConnectionMapping              = queries.MakeStructMapping(whitelistedConnectionType)
	whitelistedConnectionPrimaryKeyMapping, _ = queries.BindMapping(whitelistedConnectionType, whitelistedConnectionMapping, whitelistedConnectionPrimaryKeyColumns)
	whitelistedConnectionInsertCacheMut       sync.RWMutex
	whitelistedConnectionInsertCache          = make(map[string]insertCache)
	whitelistedConnectionUpdateCacheMut       sync.RWMutex
	whitelistedConnectionUpdateCache          = make(map[string]updateCache)
	whitelistedConnectionUpsertCacheMut       sync.RWMutex
	whitelistedConnectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneP returns a single whitelistedConnection record from the query, and panics on error.
func (q whitelistedConnectionQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *WhitelistedConnection {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single whitelistedConnection record from the query.
func (q whitelistedConnectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WhitelistedConnection, error) {
	o := &WhitelistedConnection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: failed to execute a one query for whitelisted_connections")
	}

	return o, nil
}

// AllP returns all WhitelistedConnection records from the query, and panics on error.
func (q whitelistedConnectionQuery) AllP(ctx context.Context, exec boil.ContextExecutor) WhitelistedConnectionSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all WhitelistedConnection records from the query.
func (q whitelistedConnectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (WhitelistedConnectionSlice, error) {
	var o []*WhitelistedConnection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "core: failed to assign all query results to WhitelistedConnection slice")
	}

	return o, nil
}

// CountP returns the count of all WhitelistedConnection records in the query, and panics on error.
func (q whitelistedConnectionQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all WhitelistedConnection records in the query.
func (q whitelistedConnectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to count whitelisted_connections rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q whitelistedConnectionQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q whitelistedConnectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "core: failed to check if whitelisted_connections exists")
	}

	return count > 0, nil
}

// AllowsWho pointed to by the foreign key.
func (o *WhitelistedConnection) AllowsWho(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AllowsWhoID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Connection pointed to by the foreign key.
func (o *WhitelistedConnection) Connection(mods ...qm.QueryMod) userConnectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ConnectionID),
	}

	queryMods = append(queryMods, mods...)

	return UserConnections(queryMods...)
}

// Who pointed to by the foreign key.
func (o *WhitelistedConnection) Who(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WhoID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadAllowsWho allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (whitelistedConnectionL) LoadAllowsWho(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWhitelistedConnection interface{}, mods queries.Applicator) error {
	var slice []*WhitelistedConnection
	var object *WhitelistedConnection

	if singular {
		var ok bool
		object, ok = maybeWhitelistedConnection.(*WhitelistedConnection)
		if !ok {
			object = new(WhitelistedConnection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWhitelistedConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWhitelistedConnection))
			}
		}
	} else {
		s, ok := maybeWhitelistedConnection.(*[]*WhitelistedConnection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWhitelistedConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWhitelistedConnection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &whitelistedConnectionR{}
		}
		args[object.AllowsWhoID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &whitelistedConnectionR{}
			}

			args[obj.AllowsWhoID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AllowsWho = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AllowsWhoWhitelistedConnections = append(foreign.R.AllowsWhoWhitelistedConnections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AllowsWhoID == foreign.ID {
				local.R.AllowsWho = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AllowsWhoWhitelistedConnections = append(foreign.R.AllowsWhoWhitelistedConnections, local)
				break
			}
		}
	}

	return nil
}

// LoadConnection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (whitelistedConnectionL) LoadConnection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWhitelistedConnection interface{}, mods queries.Applicator) error {
	var slice []*WhitelistedConnection
	var object *WhitelistedConnection

	if singular {
		var ok bool
		object, ok = maybeWhitelistedConnection.(*WhitelistedConnection)
		if !ok {
			object = new(WhitelistedConnection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWhitelistedConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWhitelistedConnection))
			}
		}
	} else {
		s, ok := maybeWhitelistedConnection.(*[]*WhitelistedConnection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWhitelistedConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWhitelistedConnection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &whitelistedConnectionR{}
		}
		if !queries.IsNil(object.ConnectionID) {
			args[object.ConnectionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &whitelistedConnectionR{}
			}

			if !queries.IsNil(obj.ConnectionID) {
				args[obj.ConnectionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_connections`),
		qm.WhereIn(`user_connections.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserConnection")
	}

	var resultSlice []*UserConnection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserConnection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_connections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_connections")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Connection = foreign
		if foreign.R == nil {
			foreign.R = &userConnectionR{}
		}
		foreign.R.ConnectionWhitelistedConnection = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ConnectionID, foreign.ID) {
				local.R.Connection = foreign
				if foreign.R == nil {
					foreign.R = &userConnectionR{}
				}
				foreign.R.ConnectionWhitelistedConnection = local
				break
			}
		}
	}

	return nil
}

// LoadWho allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (whitelistedConnectionL) LoadWho(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWhitelistedConnection interface{}, mods queries.Applicator) error {
	var slice []*WhitelistedConnection
	var object *WhitelistedConnection

	if singular {
		var ok bool
		object, ok = maybeWhitelistedConnection.(*WhitelistedConnection)
		if !ok {
			object = new(WhitelistedConnection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWhitelistedConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWhitelistedConnection))
			}
		}
	} else {
		s, ok := maybeWhitelistedConnection.(*[]*WhitelistedConnection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWhitelistedConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWhitelistedConnection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &whitelistedConnectionR{}
		}
		args[object.WhoID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &whitelistedConnectionR{}
			}

			args[obj.WhoID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Who = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.WhoWhitelistedConnections = append(foreign.R.WhoWhitelistedConnections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WhoID == foreign.ID {
				local.R.Who = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.WhoWhitelistedConnections = append(foreign.R.WhoWhitelistedConnections, local)
				break
			}
		}
	}

	return nil
}

// SetAllowsWhoP of the whitelistedConnection to the related item.
// Sets o.R.AllowsWho to related.
// Adds o to related.R.AllowsWhoWhitelistedConnections.
// Panics on error.
func (o *WhitelistedConnection) SetAllowsWhoP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetAllowsWho(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAllowsWho of the whitelistedConnection to the related item.
// Sets o.R.AllowsWho to related.
// Adds o to related.R.AllowsWhoWhitelistedConnections.
func (o *WhitelistedConnection) SetAllowsWho(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"whitelisted_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"allows_who_id"}),
		strmangle.WhereClause("\"", "\"", 2, whitelistedConnectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AllowsWhoID = related.ID
	if o.R == nil {
		o.R = &whitelistedConnectionR{
			AllowsWho: related,
		}
	} else {
		o.R.AllowsWho = related
	}

	if related.R == nil {
		related.R = &userR{
			AllowsWhoWhitelistedConnections: WhitelistedConnectionSlice{o},
		}
	} else {
		related.R.AllowsWhoWhitelistedConnections = append(related.R.AllowsWhoWhitelistedConnections, o)
	}

	return nil
}

// SetConnectionP of the whitelistedConnection to the related item.
// Sets o.R.Connection to related.
// Adds o to related.R.ConnectionWhitelistedConnection.
// Panics on error.
func (o *WhitelistedConnection) SetConnectionP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserConnection) {
	if err := o.SetConnection(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetConnection of the whitelistedConnection to the related item.
// Sets o.R.Connection to related.
// Adds o to related.R.ConnectionWhitelistedConnection.
func (o *WhitelistedConnection) SetConnection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserConnection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"whitelisted_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"connection_id"}),
		strmangle.WhereClause("\"", "\"", 2, whitelistedConnectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ConnectionID, related.ID)
	if o.R == nil {
		o.R = &whitelistedConnectionR{
			Connection: related,
		}
	} else {
		o.R.Connection = related
	}

	if related.R == nil {
		related.R = &userConnectionR{
			ConnectionWhitelistedConnection: o,
		}
	} else {
		related.R.ConnectionWhitelistedConnection = o
	}

	return nil
}

// RemoveConnectionP relationship.
// Sets o.R.Connection to nil.
// Removes o from all passed in related items' relationships struct.
// Panics on error.
func (o *WhitelistedConnection) RemoveConnectionP(ctx context.Context, exec boil.ContextExecutor, related *UserConnection) {
	if err := o.RemoveConnection(ctx, exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveConnection relationship.
// Sets o.R.Connection to nil.
// Removes o from all passed in related items' relationships struct.
func (o *WhitelistedConnection) RemoveConnection(ctx context.Context, exec boil.ContextExecutor, related *UserConnection) error {
	var err error

	queries.SetScanner(&o.ConnectionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("connection_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Connection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.ConnectionWhitelistedConnection = nil
	return nil
}

// SetWhoP of the whitelistedConnection to the related item.
// Sets o.R.Who to related.
// Adds o to related.R.WhoWhitelistedConnections.
// Panics on error.
func (o *WhitelistedConnection) SetWhoP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) {
	if err := o.SetWho(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetWho of the whitelistedConnection to the related item.
// Sets o.R.Who to related.
// Adds o to related.R.WhoWhitelistedConnections.
func (o *WhitelistedConnection) SetWho(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"whitelisted_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"who_id"}),
		strmangle.WhereClause("\"", "\"", 2, whitelistedConnectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WhoID = related.ID
	if o.R == nil {
		o.R = &whitelistedConnectionR{
			Who: related,
		}
	} else {
		o.R.Who = related
	}

	if related.R == nil {
		related.R = &userR{
			WhoWhitelistedConnections: WhitelistedConnectionSlice{o},
		}
	} else {
		related.R.WhoWhitelistedConnections = append(related.R.WhoWhitelistedConnections, o)
	}

	return nil
}

// WhitelistedConnections retrieves all the records using an executor.
func WhitelistedConnections(mods ...qm.QueryMod) whitelistedConnectionQuery {
	mods = append(mods, qm.From("\"whitelisted_connections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"whitelisted_connections\".*"})
	}

	return whitelistedConnectionQuery{q}
}

// FindWhitelistedConnectionP retrieves a single record by ID with an executor, and panics on error.
func FindWhitelistedConnectionP(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) *WhitelistedConnection {
	retobj, err := FindWhitelistedConnection(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindWhitelistedConnection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWhitelistedConnection(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*WhitelistedConnection, error) {
	whitelistedConnectionObj := &WhitelistedConnection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"whitelisted_connections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, whitelistedConnectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "core: unable to select from whitelisted_connections")
	}

	return whitelistedConnectionObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *WhitelistedConnection) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WhitelistedConnection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("core: no whitelisted_connections provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(whitelistedConnectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	whitelistedConnectionInsertCacheMut.RLock()
	cache, cached := whitelistedConnectionInsertCache[key]
	whitelistedConnectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			whitelistedConnectionAllColumns,
			whitelistedConnectionColumnsWithDefault,
			whitelistedConnectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(whitelistedConnectionType, whitelistedConnectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(whitelistedConnectionType, whitelistedConnectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"whitelisted_connections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"whitelisted_connections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "core: unable to insert into whitelisted_connections")
	}

	if !cached {
		whitelistedConnectionInsertCacheMut.Lock()
		whitelistedConnectionInsertCache[key] = cache
		whitelistedConnectionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateP uses an executor to update the WhitelistedConnection, and panics on error.
// See Update for more documentation.
func (o *WhitelistedConnection) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the WhitelistedConnection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WhitelistedConnection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	whitelistedConnectionUpdateCacheMut.RLock()
	cache, cached := whitelistedConnectionUpdateCache[key]
	whitelistedConnectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			whitelistedConnectionAllColumns,
			whitelistedConnectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("core: unable to update whitelisted_connections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"whitelisted_connections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, whitelistedConnectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(whitelistedConnectionType, whitelistedConnectionMapping, append(wl, whitelistedConnectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update whitelisted_connections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by update for whitelisted_connections")
	}

	if !cached {
		whitelistedConnectionUpdateCacheMut.Lock()
		whitelistedConnectionUpdateCache[key] = cache
		whitelistedConnectionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q whitelistedConnectionQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q whitelistedConnectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all for whitelisted_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected for whitelisted_connections")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o WhitelistedConnectionSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WhitelistedConnectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("core: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), whitelistedConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"whitelisted_connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, whitelistedConnectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to update all in whitelistedConnection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to retrieve rows affected all in update all whitelistedConnection")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *WhitelistedConnection) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WhitelistedConnection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("core: no whitelisted_connections provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(whitelistedConnectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	whitelistedConnectionUpsertCacheMut.RLock()
	cache, cached := whitelistedConnectionUpsertCache[key]
	whitelistedConnectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			whitelistedConnectionAllColumns,
			whitelistedConnectionColumnsWithDefault,
			whitelistedConnectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			whitelistedConnectionAllColumns,
			whitelistedConnectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("core: unable to upsert whitelisted_connections, could not build update column list")
		}

		ret := strmangle.SetComplement(whitelistedConnectionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(whitelistedConnectionPrimaryKeyColumns) == 0 {
				return errors.New("core: unable to upsert whitelisted_connections, could not build conflict column list")
			}

			conflict = make([]string, len(whitelistedConnectionPrimaryKeyColumns))
			copy(conflict, whitelistedConnectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"whitelisted_connections\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(whitelistedConnectionType, whitelistedConnectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(whitelistedConnectionType, whitelistedConnectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "core: unable to upsert whitelisted_connections")
	}

	if !cached {
		whitelistedConnectionUpsertCacheMut.Lock()
		whitelistedConnectionUpsertCache[key] = cache
		whitelistedConnectionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single WhitelistedConnection record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *WhitelistedConnection) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single WhitelistedConnection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WhitelistedConnection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("core: no WhitelistedConnection provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), whitelistedConnectionPrimaryKeyMapping)
	sql := "DELETE FROM \"whitelisted_connections\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete from whitelisted_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by delete for whitelisted_connections")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q whitelistedConnectionQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q whitelistedConnectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("core: no whitelistedConnectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from whitelisted_connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for whitelisted_connections")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o WhitelistedConnectionSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WhitelistedConnectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), whitelistedConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"whitelisted_connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, whitelistedConnectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "core: unable to delete all from whitelistedConnection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "core: failed to get rows affected by deleteall for whitelisted_connections")
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *WhitelistedConnection) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WhitelistedConnection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWhitelistedConnection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *WhitelistedConnectionSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WhitelistedConnectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WhitelistedConnectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), whitelistedConnectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"whitelisted_connections\".* FROM \"whitelisted_connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, whitelistedConnectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "core: unable to reload all in WhitelistedConnectionSlice")
	}

	*o = slice

	return nil
}

// WhitelistedConnectionExistsP checks if the WhitelistedConnection row exists. Panics on error.
func WhitelistedConnectionExistsP(ctx context.Context, exec boil.ContextExecutor, iD string) bool {
	e, err := WhitelistedConnectionExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// WhitelistedConnectionExists checks if the WhitelistedConnection row exists.
func WhitelistedConnectionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"whitelisted_connections\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "core: unable to check if whitelisted_connections exists")
	}

	return exists, nil
}

// Exists checks if the WhitelistedConnection row exists.
func (o *WhitelistedConnection) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WhitelistedConnectionExists(ctx, exec, o.ID)
}
